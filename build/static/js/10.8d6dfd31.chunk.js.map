{"version":3,"sources":["components/sales/sales_date_selector.js"],"names":["SalesDateSelector","state","startDate","Date","props","sales_date","start_date","endDate","end_date","key","date","cost","handleSelect","ranges","a","setState","selection","dates","UPDATE_GET_SALES_LIST_ACTION","UPDATE_SALES_DATE_ACTION","GET_SALES_LIST_ACTION","token","depot","this","className","trigger","size","color","toDateString","position","onChange","showSelectionPreview","moveRangeOnFirstSelection","months","direction","preventSnapRefocus","calendarFocus","React","Component","getDerivedStateFromProps","mapDispatchToProps","connect","auth_reducer","update_reducer","depots","list_reducer","depot_list"],"mappings":"6PAUMA,E,4MACFC,MAAQ,CACJC,UAAW,IAAIC,KAAK,EAAKC,MAAMC,WAAWC,YAC1CC,QAAS,IAAIJ,KAAK,EAAKC,MAAMC,WAAWG,UACxCC,IAAK,YACLC,MAAM,EACNC,MAAM,G,EASVC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DAEX,EAAKC,SAAS,CACVb,UAAWW,EAAOG,UAAUd,UAC5BK,QAASM,EAAOG,UAAUT,UAGxBU,EAAQ,CACVX,WAAYO,EAAOG,UAAUd,UAC7BM,SAAUK,EAAOG,UAAUT,SATpB,SAWL,EAAKH,MAAMc,+BAXN,uBAYL,EAAKd,MAAMe,yBAAyBF,GAZ/B,uBAaL,EAAKb,MAAMgB,sBAAsB,EAAKhB,MAAMiB,MAAMC,MAAOL,EAAMX,WAAYW,EAAMT,UAb5E,2C,kGAgBf,WAEI,IAAMF,EAAaiB,KAAKtB,MAAMC,UACxBM,EAAWe,KAAKtB,MAAMM,QAC5B,OACI,8BACI,qBAAKiB,UAAU,YAAf,SAEI,cAAC,IAAD,CAAOC,QACH,cAAC,IAAD,CAAQD,UAAU,cAAcE,KAAK,KAArC,SACI,sBAAKF,UAAU,gBAAf,UACI,+BAAM,cAAC,IAAD,CAAiBG,MAAM,UAAUD,KAAM,OAC5CpB,EAAWsB,eAFhB,MAEmCpB,EAASoB,eACxC,+BAAM,cAAC,IAAD,CAAqBF,KAAM,YAKzCG,SAAS,SAVb,SAYI,cAAC,kBAAD,CACIC,SAAUP,KAAKX,aACfmB,sBAAsB,EACtBC,2BAA2B,EAC3BC,OAAQ,EACRpB,OAAQ,CAACU,KAAKtB,OACdiC,UAAU,aACVC,oBAAoB,EACpBC,cAAc,YACdZ,UAAU,yB,GA5DNa,IAAMC,WAAhCtC,EASKuC,yBAA2B,SAACnC,EAAOH,GAItC,OAFAA,EAAMC,UAAY,IAAIC,KAAKC,EAAMC,WAAWC,YAC5CL,EAAMM,QAAU,IAAIJ,KAAKC,EAAMC,WAAWG,UACnCP,GA6Df,IAaMuC,EAAqB,CACvBrB,6BACAD,iCACAE,2BAGWqB,uBAnBS,SAAAxC,GACpB,IAAMgB,EAAQ,CACVX,WAAY,IAAIH,KAAK,KAAM,EAAG,IAC9BK,SAAU,IAAIL,KAAK,KAAM,EAAG,KAEhC,MAAO,CACHkB,MAAOpB,EAAMyC,aAAarB,MAC1BhB,WAAaJ,EAAM0C,eAAetC,WAAaJ,EAAM0C,eAAetC,WAAaY,EACjF2B,OAAQ3C,EAAM4C,aAAaC,cAa/BN,EAFWC,CAGbzC","file":"static/js/10.8d6dfd31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport { UPDATE_SALES_DATE_ACTION, UPDATE_GET_SALES_LIST_ACTION, GET_SALES_LIST_ACTION } from \"../../redux/actions/actions\";\r\nimport { MdCalendarToday, MdKeyboardArrowDown } from \"react-icons/md\";\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport Popup from 'reactjs-popup';\r\n\r\n\r\n\r\nclass SalesDateSelector extends React.Component {\r\n    state = {\r\n        startDate: new Date(this.props.sales_date.start_date),\r\n        endDate: new Date(this.props.sales_date.end_date),\r\n        key: 'selection',\r\n        date: true,\r\n        cost: false,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n\r\n        state.startDate = new Date(props.sales_date.start_date)\r\n        state.endDate = new Date(props.sales_date.end_date)\r\n        return state\r\n    }\r\n    handleSelect = async (ranges) => {\r\n\r\n        this.setState({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n\r\n        const dates = {\r\n            start_date: ranges.selection.startDate,\r\n            end_date: ranges.selection.endDate\r\n        }\r\n        await this.props.UPDATE_GET_SALES_LIST_ACTION()\r\n        await this.props.UPDATE_SALES_DATE_ACTION(dates)\r\n        await this.props.GET_SALES_LIST_ACTION(this.props.token.depot, dates.start_date, dates.end_date)\r\n    }\r\n\r\n    render() {\r\n\r\n        const start_date = this.state.startDate\r\n        const end_date = this.state.endDate\r\n        return (\r\n            <div>\r\n                <div className=\"sales-top\">\r\n\r\n                    <Popup trigger={\r\n                        <Button className='input-dates' size='sm'>\r\n                            <div className='input-display'>\r\n                                <span><MdCalendarToday color='#D04D30' size={18} /></span>\r\n                                {start_date.toDateString()} - {end_date.toDateString()}\r\n                                <span><MdKeyboardArrowDown size={18} /></span>\r\n                            </div>\r\n\r\n                        </Button>\r\n                    }\r\n                        position=\"bottom\"\r\n                    >\r\n                        <DateRangePicker\r\n                            onChange={this.handleSelect}\r\n                            showSelectionPreview={true}\r\n                            moveRangeOnFirstSelection={false}\r\n                            months={2}\r\n                            ranges={[this.state]}\r\n                            direction=\"horizontal\"\r\n                            preventSnapRefocus={true}\r\n                            calendarFocus=\"backwards\"\r\n                            className='date-range'\r\n                        />\r\n                    </Popup>\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const dates = {\r\n        start_date: new Date(2022, 3, 20),\r\n        end_date: new Date(2022, 3, 30)\r\n    }\r\n    return {\r\n        token: state.auth_reducer.token,\r\n        sales_date: (state.update_reducer.sales_date ? state.update_reducer.sales_date : dates),\r\n        depots: state.list_reducer.depot_list,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_SALES_DATE_ACTION,\r\n    UPDATE_GET_SALES_LIST_ACTION,\r\n    GET_SALES_LIST_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SalesDateSelector);\r\n"],"sourceRoot":""}