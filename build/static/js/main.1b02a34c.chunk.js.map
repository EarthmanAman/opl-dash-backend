{"version":3,"sources":["redux/actions/types.js","components/utils/spinner.js","redux/reducers/auth_reducer.js","redux/reducers/list_reducer.js","redux/reducers/update_reducer.js","redux/reducers/reducer.js","redux/store.js","routes/index.js","App.js","reportWebVitals.js","index.js"],"names":["GET_TOKEN","GET_TOKEN_ERROR","GET_TOKEN_ERROR_REMOVE","USER_LOGGED_OUT","GET_TOP_CUSTOMER","UPDATE_TOP_CUSTOMER","GET_CUSTOMER_LIST","GET_CUSTOMER_DETAIL","ADD_CUSTOMER","GET_DEPOT_LIST","GET_DEPOT_MONTH","UPDATE_DEPOT_MONTH","GET_DEPOT_PRODUCT_MONTH","UPDATE_DEPOT_PRODUCT_MONTH","GET_DEPOT_SERIES","UPDATE_DEPOT_SERIES","GET_DEPOT_PRODUCT_SERIES","GET_DEPOT_CUSTOMER","UPDATE_DEPOT_CUSTOMER","GET_PRODUCT_SERIES","UPDATE_PRODUCT_SERIES","GET_PRODUCT_MONTH","UPDATE_PRODUCT_MONTH","GET_PRODUCT_TOP_CUSTOMER","GET_PRODUCT_LIST","GET_SALES_LIST","UPDATE_GET_SALES_LIST","UPLOAD_EXCEL","UPLOAD_EXCEL_ERROR","UPDATE_SELECTION_DATES","UPDATE_DASHBOARD_METRIC","UPDATE_PRODUCT_MONTH_YEAR","UPDATE_CURRENCY_TYPE","UPDATE_DEPOT_MONTH_YEAR","UPDATE_DEPOT_MONTH_MONTH","UPDATE_DEPOT_PRODUCT_MONTH_YEAR","UPDATE_DEPOT_PRODUCT_MONTH_MONTH","UPDATE_DEPOT","UPDATE_TOP_CUSTOMER_YEAR","UPDATE_TOP_CUSTOMER_MONTH","UPDATE_TOP_CUSTOMER_PRODUCT","UPDATE_DEPOT_CUSTOMER_YEAR","UPDATE_DEPOT_CUSTOMER_MONTH","UPDATE_SALES_DATE","UPDATE_CUSTOMER_YEAR","SpinnerComponent","className","ariaLabel","color","height","width","timeout","visible","this","props","spinner","React","Component","merge","prev","next","Object","assign","AuthReducer","state","action","type","token","payload","login_error","LIST_REDUCER","top_customer","update_top_customer","customer_list","customer_detail","depot_list","depot_month","update_depot_month","depot_product_series","update_product_series","depot_customer","update_depot_customer","depot_product_month","update_depot_product_month","depot_series","update_depot_series","product_series","product_month","update_product_month","product_top_customer","product_list","sales_list","update_get_sales_list","UPDATE_REDUCER","add_customer","dashboard_metric","customer_year","selection_dates","currency_type","product_month_year","depot_month_month","depot_month_year","depot_product_month_year","depot_product_month_month","depot","depot_customer_month","depot_customer_year","top_customer_month","top_customer_year","top_customer_product","sales_date","uploaded_excel","upload_excel_error","appReducer","combineReducers","auth_reducer","list_reducer","ListReducer","update_reducer","UpdateReducer","rootReducer","storage","removeItem","undefined","persistConfig","key","persistedReducer","persistReducer","reducer","store","createStore","applyMiddleware","thunk","persistStore","LoginPage","lazy","HomePage","DepotPage","SalesPage","CustomerPage","RoutesComponent","fallback","path","exact","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4GAAA,0/CACO,IAAMA,EAAY,YACZC,EAAkB,kBAClBC,EAAyB,yBACzBC,EAAkB,kBAGlBC,EAAmB,mBACnBC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAAsB,sBACtBC,EAAe,eAIfC,EAAiB,iBACjBC,EAAkB,kBAClBC,EAAqB,qBACrBC,EAA0B,0BAC1BC,EAA6B,6BAC7BC,EAAmB,mBACnBC,EAAsB,sBACtBC,EAA2B,2BAC3BC,EAAqB,qBACrBC,EAAwB,wBAExBC,EAAqB,qBACrBC,EAAwB,wBACxBC,EAAoB,oBACpBC,EAAuB,uBACvBC,EAA2B,2BAC3BC,EAAmB,mBAGnBC,EAAiB,iBACjBC,EAAwB,wBACxBC,EAAe,eACfC,EAAqB,qBAErBC,EAAyB,yBACzBC,EAA0B,0BAC1BC,EAA4B,4BAC5BC,EAAuB,uBAEvBC,EAA0B,0BAC1BC,EAA2B,2BAC3BC,EAAkC,kCAClCC,EAAmC,mCACnCC,EAAe,eACfC,EAA2B,2BAC3BC,EAA4B,4BAC5BC,EAA8B,8BAC9BC,EAA6B,6BAC7BC,EAA8B,8BAE9BC,EAAoB,oBACpBC,EAAuB,wB,mGCrD9BC,E,4JACF,WACI,OACI,qBAAKC,UAAU,UAAf,SACI,cAAC,IAAD,CACIC,UAAU,mCACVC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,IACTC,QAASC,KAAKC,MAAMC,gB,GAVTC,IAAMC,WAmBtBZ,O,qHCfTa,EAAQ,SAACC,EAAMC,GAAP,OAAgBC,OAAOC,OAAO,GAAIH,EAAMC,IAiBvCG,EAfK,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAExC,OAAQA,EAAOC,MAEX,KAAKlE,IACD,OAAO0D,EAAMM,EAAO,CAAEG,MAAOF,EAAOG,QAASC,YAAa,OAC9D,KAAKpE,IAEL,KAAKC,IACD,OAAOwD,EAAMM,EAAO,CAAEK,YAAaJ,EAAOG,UAC9C,QACI,OAAOJ,ICVbN,EAAQ,SAACC,EAAMC,GAAP,OAAgBC,OAAOC,OAAO,GAAIH,EAAMC,IAqEvCU,EAnEM,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIC,EAAW,uCAEzC,OAAQA,EAAOC,MAEX,KAAK9D,IACD,OAAOsD,EAAMM,EAAO,CAAEO,aAAcN,EAAOG,QAASI,qBAAqB,IAC7E,KAAKnE,IACD,OAAOqD,EAAMM,EAAO,CAAEQ,oBAAqBP,EAAOG,UACtD,KAAK9D,IACD,OAAOoD,EAAMM,EAAO,CAAES,cAAeR,EAAOG,UAChD,KAAK7D,IACD,OAAOmD,EAAMM,EAAO,CAAEU,gBAAiBT,EAAOG,UAElD,KAAK3D,IACD,OAAOiD,EAAMM,EAAO,CAAEW,WAAYV,EAAOG,UAE7C,KAAK1D,IACD,OAAOgD,EAAMM,EAAO,CAAEY,YAAaX,EAAOG,QAASS,oBAAoB,IAE3E,KAAKlE,IACD,OAAO+C,EAAMM,EAAO,CAAEa,oBAAoB,IAE9C,KAAK7D,IACD,OAAO0C,EAAMM,EAAO,CAAEc,qBAAsBb,EAAOG,QAASW,uBAAuB,IAEvF,KAAK9D,IACD,OAAOyC,EAAMM,EAAO,CAAEgB,eAAgBf,EAAOG,QAASa,uBAAuB,IAEjF,KAAK/D,IACD,OAAOwC,EAAMM,EAAO,CAAEiB,uBAAuB,IAEjD,KAAKrE,IACD,OAAO8C,EAAMM,EAAO,CAAEkB,oBAAqBjB,EAAOG,QAASe,4BAA4B,IAE3F,KAAKtE,IACD,OAAO6C,EAAMM,EAAO,CAAEmB,4BAA4B,IAEtD,KAAKrE,IACD,OAAO4C,EAAMM,EAAO,CAAEoB,aAAcnB,EAAOG,QAASW,uBAAuB,EAAOM,qBAAqB,IAE3G,KAAKtE,IACD,OAAO2C,EAAMM,EAAO,CAAEqB,qBAAqB,IAE/C,KAAKlE,IACD,OAAOuC,EAAMM,EAAO,CAAEsB,eAAgBrB,EAAOG,QAASW,uBAAuB,IACjF,KAAK3D,IACD,OAAOsC,EAAMM,EAAO,CAAEe,uBAAuB,IACjD,KAAK1D,IACD,OAAOqC,EAAMM,EAAO,CAAEuB,cAAetB,EAAOG,QAASoB,sBAAsB,IAC/E,KAAKlE,IACD,OAAOoC,EAAMM,EAAO,CAAEwB,sBAAsB,IAEhD,KAAKjE,IACD,OAAOmC,EAAMM,EAAO,CAAEyB,qBAAsBxB,EAAOG,QAASI,qBAAqB,IACrF,KAAKhD,IACD,OAAOkC,EAAMM,EAAO,CAAE0B,aAAczB,EAAOG,UAE/C,KAAK3C,IACD,OAAOiC,EAAMM,EAAO,CAAE2B,WAAY1B,EAAOG,QAASwB,uBAAuB,IAC7E,KAAKlE,IACD,OAAOgC,EAAMM,EAAO,CAAE4B,uBAAuB,IAEjD,QACI,OAAO5B,IC9DbN,EAAQ,SAACC,EAAMC,GAAP,OAAgBC,OAAOC,OAAO,GAAIH,EAAMC,IA2DvCiC,EAzDQ,WAAyB,IAAxB7B,EAAuB,uDAAf,GAAIC,EAAW,uCAE3C,OAAQA,EAAOC,MAEX,KAAK1D,IACD,OAAOkD,EAAMM,EAAO,CAAE8B,aAAc7B,EAAOG,UAC/C,KAAKtC,IACD,OAAO4B,EAAMM,EAAO,CAAE+B,iBAAkB9B,EAAOG,UACnD,KAAKxB,IACD,OAAOc,EAAMM,EAAO,CAAEgC,cAAe/B,EAAOG,UAChD,KAAKvC,IACD,OAAO6B,EAAMM,EAAO,CAAEiC,gBAAiBhC,EAAOG,UAClD,KAAKpC,IACD,OAAO0B,EAAMM,EAAO,CAAEkC,cAAejC,EAAOG,UAChD,KAAKrC,IACD,OAAO2B,EAAMM,EAAO,CAAEmC,mBAAoBlC,EAAOG,UAErD,KAAKlC,IACD,OAAOwB,EAAMM,EAAO,CAAEoC,kBAAmBnC,EAAOG,UACpD,KAAKnC,IACD,OAAOyB,EAAMM,EAAO,CAAEqC,iBAAkBpC,EAAOG,UACnD,KAAKjC,IACD,OAAOuB,EAAMM,EAAO,CAAEsC,yBAA0BrC,EAAOG,UAC3D,KAAKhC,IACD,OAAOsB,EAAMM,EAAO,CAAEuC,0BAA2BtC,EAAOG,UAC5D,KAAK/B,IACD,OAAOqB,EAAMM,EAAO,CAAEwC,MAAOvC,EAAOG,UACxC,KAAK1B,IACD,OAAOgB,EAAMM,EAAO,CAAEyC,qBAAsBxC,EAAOG,UACvD,KAAK3B,IACD,OAAOiB,EAAMM,EAAO,CAAE0C,oBAAqBzC,EAAOG,UAGtD,KAAK7B,IACD,OAAOmB,EAAMM,EAAO,CAAE2C,mBAAoB1C,EAAOG,UAErD,KAAK9B,IACD,OAAOoB,EAAMM,EAAO,CAAE4C,kBAAmB3C,EAAOG,UAEpD,KAAK5B,IACD,OAAOkB,EAAMM,EAAO,CAAE6C,qBAAsB5C,EAAOG,UAEvD,KAAKzB,IACD,OAAOe,EAAMM,EAAO,CAAE8C,WAAY7C,EAAOG,UAC7C,KAAKzC,IAED,OAAO+B,EAAMM,EAAO,CAAE+C,eAAgB9C,EAAOG,QAAS4C,mBAAoB,OAE9E,KAAKpF,IAED,OAAO8B,EAAMM,EAAO,CAAEgD,mBAAoB/C,EAAOG,UAErD,QACI,OAAOJ,IC3DbiD,EAAaC,YAAgB,CAC/BC,aAAcpD,EAEdqD,aAAcC,EACdC,eAAgBC,IAcLC,EAXK,SAACxD,EAAOC,GAQxB,OAPIA,EAAOC,OAAS/D,MAEhBsH,IAAQC,WAAW,gBAGnB1D,OAAQ2D,GAELV,EAAWjD,EAAOC,IClBvB2D,EAAgB,CACrBC,IAAK,OACLJ,QAASA,KAGJK,EAAmBC,YAAeH,EAAeI,GAE1CC,EAAQC,YAAYJ,EAAkBK,YAAgBC,MAC1CC,YAAaJ,I,oMCFhCK,EAAYC,gBAAK,kBAAM,sEACvBC,EAAWD,gBAAK,kBAAM,6EACtBE,EAAYF,gBAAK,kBAAM,6EACvBG,EAAYH,gBAAK,kBAAM,6EACvBI,EAAeJ,gBAAK,kBAAM,4EAE1BK,E,4JACF,WACI,OACI,cAAC,IAAD,UACI,cAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,CAAkBtF,SAAS,IAA/C,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOuF,KAAK,SAASC,OAAK,EAACC,QAAS,cAACV,EAAD,MACpC,cAAC,IAAD,CAAOQ,KAAK,IAAIC,OAAK,EAACC,QAAS,cAACR,EAAD,MAC/B,cAAC,IAAD,CAAOM,KAAK,QAAQC,OAAK,EAACC,QAAS,cAACN,EAAD,MACnC,cAAC,IAAD,CAAOI,KAAK,UAAUC,OAAK,EAACC,QAAS,cAACP,EAAD,MACrC,cAAC,IAAD,CAAOK,KAAK,aAAaC,OAAK,EAACC,QAAS,cAACL,EAAD,iB,GAVlCnF,IAAMC,WAmBrBmF,I,cCtBAK,MATf,WACE,OACE,cAAC,IAAD,CAAUhB,MAAOA,IAAjB,SACE,cAAC,EAAD,OCGSiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,M","file":"static/js/main.1b02a34c.chunk.js","sourcesContent":["// AUTHENTICATION\r\nexport const GET_TOKEN = \"GET_TOKEN\";\r\nexport const GET_TOKEN_ERROR = \"GET_TOKEN_ERROR\";\r\nexport const GET_TOKEN_ERROR_REMOVE = \"GET_TOKEN_ERROR_REMOVE\"\r\nexport const USER_LOGGED_OUT = \"USER_LOGGED_OUT\"\r\n\r\n// CUSTOMER\r\nexport const GET_TOP_CUSTOMER = \"GET_TOP_CUSTOMER\"\r\nexport const UPDATE_TOP_CUSTOMER = \"UPDATE_TOP_CUSTOMER\"\r\nexport const GET_CUSTOMER_LIST = \"GET_CUSTOMER_LIST\"\r\nexport const GET_CUSTOMER_DETAIL = \"GET_CUSTOMER_DETAIL\"\r\nexport const ADD_CUSTOMER = \"ADD_CUSTOMER\"\r\nexport const CUSTOMER_CREATE_ERROR = \"CUSTOMER_CREATE_ERROR\"\r\n\r\n// DEPOT\r\nexport const GET_DEPOT_LIST = \"GET_DEPOT_LIST\"\r\nexport const GET_DEPOT_MONTH = \"GET_DEPOT_MONTH\"\r\nexport const UPDATE_DEPOT_MONTH = \"UPDATE_DEPOT_MONTH\"\r\nexport const GET_DEPOT_PRODUCT_MONTH = \"GET_DEPOT_PRODUCT_MONTH\"\r\nexport const UPDATE_DEPOT_PRODUCT_MONTH = \"UPDATE_DEPOT_PRODUCT_MONTH\"\r\nexport const GET_DEPOT_SERIES = \"GET_DEPOT_SERIES\"\r\nexport const UPDATE_DEPOT_SERIES = \"UPDATE_DEPOT_SERIES\"\r\nexport const GET_DEPOT_PRODUCT_SERIES = \"GET_DEPOT_PRODUCT_SERIES\"\r\nexport const GET_DEPOT_CUSTOMER = \"GET_DEPOT_CUSTOMER\"\r\nexport const UPDATE_DEPOT_CUSTOMER = \"UPDATE_DEPOT_CUSTOMER\"\r\n// PRODUCT\r\nexport const GET_PRODUCT_SERIES = \"GET_PRODUCT_SERIES\"\r\nexport const UPDATE_PRODUCT_SERIES = \"UPDATE_PRODUCT_SERIES\"\r\nexport const GET_PRODUCT_MONTH = \"GET_PRODUCT_MONTH\"\r\nexport const UPDATE_PRODUCT_MONTH = \"UPDATE_PRODUCT_MONTH\"\r\nexport const GET_PRODUCT_TOP_CUSTOMER = \"GET_PRODUCT_TOP_CUSTOMER\"\r\nexport const GET_PRODUCT_LIST = \"GET_PRODUCT_LIST\"\r\n\r\n// SALES\r\nexport const GET_SALES_LIST = \"GET_SALES_LIST\"\r\nexport const UPDATE_GET_SALES_LIST = \"UPDATE_GET_SALES_LIST\"\r\nexport const UPLOAD_EXCEL = \"UPLOAD_EXCEL\"\r\nexport const UPLOAD_EXCEL_ERROR = \"UPLOAD_EXCEL_ERROR\"\r\n// UPDATES\r\nexport const UPDATE_SELECTION_DATES = \"UPDATE_SELECTION_DATES\"\r\nexport const UPDATE_DASHBOARD_METRIC = \"UPDATE_DASHBOARD_METRIC\"\r\nexport const UPDATE_PRODUCT_MONTH_YEAR = \"UPDATE_PRODUCT_MONTH_YEAR\"\r\nexport const UPDATE_CURRENCY_TYPE = \"UPDATE_CURRENCY_TYPE\"\r\n\r\nexport const UPDATE_DEPOT_MONTH_YEAR = \"UPDATE_DEPOT_MONTH_YEAR\"\r\nexport const UPDATE_DEPOT_MONTH_MONTH = \"UPDATE_DEPOT_MONTH_MONTH\"\r\nexport const UPDATE_DEPOT_PRODUCT_MONTH_YEAR = \"UPDATE_DEPOT_PRODUCT_MONTH_YEAR\"\r\nexport const UPDATE_DEPOT_PRODUCT_MONTH_MONTH = \"UPDATE_DEPOT_PRODUCT_MONTH_MONTH\"\r\nexport const UPDATE_DEPOT = \"UPDATE_DEPOT\"\r\nexport const UPDATE_TOP_CUSTOMER_YEAR = \"UPDATE_TOP_CUSTOMER_YEAR\"\r\nexport const UPDATE_TOP_CUSTOMER_MONTH = \"UPDATE_TOP_CUSTOMER_MONTH\"\r\nexport const UPDATE_TOP_CUSTOMER_PRODUCT = \"UPDATE_TOP_CUSTOMER_PRODUCT\"\r\nexport const UPDATE_DEPOT_CUSTOMER_YEAR = \"UPDATE_DEPOT_CUSTOMER_YEAR\"\r\nexport const UPDATE_DEPOT_CUSTOMER_MONTH = \"UPDATE_DEPOT_CUSTOMER_MONTH\"\r\n\r\nexport const UPDATE_SALES_DATE = \"UPDATE_SALES_DATE\"\r\nexport const UPDATE_CUSTOMER_YEAR = \"UPDATE_CUSTOMER_YEAR\"","import React from \"react\";\r\nimport { ThreeDots } from \"react-loader-spinner\";\r\n\r\nclass SpinnerComponent extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"spinner\">\r\n                <ThreeDots\r\n                    ariaLabel=\"Please wait as we log you in ...\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    timeout={4000} //3 secs\r\n                    visible={this.props.spinner}\r\n\r\n                />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpinnerComponent","import {\r\n    GET_TOKEN,\r\n    GET_TOKEN_ERROR,\r\n    GET_TOKEN_ERROR_REMOVE\r\n\r\n} from \"../actions/types\"\r\n\r\nconst merge = (prev, next) => Object.assign({}, prev, next)\r\n\r\nconst AuthReducer = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        // Get token\r\n        case GET_TOKEN:\r\n            return merge(state, { token: action.payload, login_error: null })\r\n        case GET_TOKEN_ERROR:\r\n            return merge(state, { login_error: action.payload })\r\n        case GET_TOKEN_ERROR_REMOVE:\r\n            return merge(state, { login_error: action.payload })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default AuthReducer","import {\r\n    GET_TOP_CUSTOMER, GET_CUSTOMER_LIST, GET_CUSTOMER_DETAIL, UPDATE_TOP_CUSTOMER,\r\n    GET_DEPOT_MONTH, GET_DEPOT_PRODUCT_MONTH, GET_DEPOT_LIST, GET_DEPOT_SERIES, GET_DEPOT_PRODUCT_SERIES, GET_DEPOT_CUSTOMER,\r\n    UPDATE_DEPOT_MONTH, UPDATE_DEPOT_PRODUCT_MONTH, UPDATE_DEPOT_SERIES, UPDATE_DEPOT_CUSTOMER,\r\n    GET_PRODUCT_SERIES, GET_PRODUCT_MONTH, GET_PRODUCT_TOP_CUSTOMER, GET_PRODUCT_LIST, UPDATE_PRODUCT_SERIES,\r\n    UPDATE_PRODUCT_MONTH,\r\n\r\n    GET_SALES_LIST, UPDATE_GET_SALES_LIST,\r\n} from \"../actions/types\"\r\n\r\nconst merge = (prev, next) => Object.assign({}, prev, next)\r\n\r\nconst LIST_REDUCER = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case GET_TOP_CUSTOMER:\r\n            return merge(state, { top_customer: action.payload, update_top_customer: false })\r\n        case UPDATE_TOP_CUSTOMER:\r\n            return merge(state, { update_top_customer: action.payload })\r\n        case GET_CUSTOMER_LIST:\r\n            return merge(state, { customer_list: action.payload })\r\n        case GET_CUSTOMER_DETAIL:\r\n            return merge(state, { customer_detail: action.payload })\r\n\r\n        case GET_DEPOT_LIST:\r\n            return merge(state, { depot_list: action.payload })\r\n\r\n        case GET_DEPOT_MONTH:\r\n            return merge(state, { depot_month: action.payload, update_depot_month: false })\r\n\r\n        case UPDATE_DEPOT_MONTH:\r\n            return merge(state, { update_depot_month: true })\r\n\r\n        case GET_DEPOT_PRODUCT_SERIES:\r\n            return merge(state, { depot_product_series: action.payload, update_product_series: false })\r\n\r\n        case GET_DEPOT_CUSTOMER:\r\n            return merge(state, { depot_customer: action.payload, update_depot_customer: false })\r\n\r\n        case UPDATE_DEPOT_CUSTOMER:\r\n            return merge(state, { update_depot_customer: true })\r\n\r\n        case GET_DEPOT_PRODUCT_MONTH:\r\n            return merge(state, { depot_product_month: action.payload, update_depot_product_month: false })\r\n\r\n        case UPDATE_DEPOT_PRODUCT_MONTH:\r\n            return merge(state, { update_depot_product_month: true })\r\n\r\n        case GET_DEPOT_SERIES:\r\n            return merge(state, { depot_series: action.payload, update_product_series: false, update_depot_series: false })\r\n\r\n        case UPDATE_DEPOT_SERIES:\r\n            return merge(state, { update_depot_series: true })\r\n\r\n        case GET_PRODUCT_SERIES:\r\n            return merge(state, { product_series: action.payload, update_product_series: false })\r\n        case UPDATE_PRODUCT_SERIES:\r\n            return merge(state, { update_product_series: true })\r\n        case GET_PRODUCT_MONTH:\r\n            return merge(state, { product_month: action.payload, update_product_month: false })\r\n        case UPDATE_PRODUCT_MONTH:\r\n            return merge(state, { update_product_month: true })\r\n\r\n        case GET_PRODUCT_TOP_CUSTOMER:\r\n            return merge(state, { product_top_customer: action.payload, update_top_customer: false })\r\n        case GET_PRODUCT_LIST:\r\n            return merge(state, { product_list: action.payload })\r\n\r\n        case GET_SALES_LIST:\r\n            return merge(state, { sales_list: action.payload, update_get_sales_list: false })\r\n        case UPDATE_GET_SALES_LIST:\r\n            return merge(state, { update_get_sales_list: true })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default LIST_REDUCER","import {\r\n    ADD_CUSTOMER,\r\n\r\n    UPDATE_DASHBOARD_METRIC, UPDATE_SELECTION_DATES, UPDATE_CURRENCY_TYPE, UPDATE_PRODUCT_MONTH_YEAR,\r\n    UPDATE_DEPOT_MONTH_MONTH, UPDATE_DEPOT_MONTH_YEAR, UPDATE_DEPOT_PRODUCT_MONTH_MONTH, UPDATE_DEPOT_PRODUCT_MONTH_YEAR,\r\n    UPDATE_DEPOT, UPDATE_DEPOT_CUSTOMER_MONTH, UPDATE_DEPOT_CUSTOMER_YEAR,\r\n\r\n    UPDATE_TOP_CUSTOMER_MONTH, UPDATE_TOP_CUSTOMER_PRODUCT, UPDATE_TOP_CUSTOMER_YEAR,\r\n    UPDATE_SALES_DATE, UPDATE_CUSTOMER_YEAR,\r\n\r\n    UPLOAD_EXCEL, UPLOAD_EXCEL_ERROR,\r\n} from \"../actions/types\"\r\n\r\nconst merge = (prev, next) => Object.assign({}, prev, next)\r\n\r\nconst UPDATE_REDUCER = (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        // Get token\r\n        case ADD_CUSTOMER:\r\n            return merge(state, { add_customer: action.payload })\r\n        case UPDATE_DASHBOARD_METRIC:\r\n            return merge(state, { dashboard_metric: action.payload })\r\n        case UPDATE_CUSTOMER_YEAR:\r\n            return merge(state, { customer_year: action.payload })\r\n        case UPDATE_SELECTION_DATES:\r\n            return merge(state, { selection_dates: action.payload })\r\n        case UPDATE_CURRENCY_TYPE:\r\n            return merge(state, { currency_type: action.payload })\r\n        case UPDATE_PRODUCT_MONTH_YEAR:\r\n            return merge(state, { product_month_year: action.payload })\r\n\r\n        case UPDATE_DEPOT_MONTH_MONTH:\r\n            return merge(state, { depot_month_month: action.payload })\r\n        case UPDATE_DEPOT_MONTH_YEAR:\r\n            return merge(state, { depot_month_year: action.payload })\r\n        case UPDATE_DEPOT_PRODUCT_MONTH_YEAR:\r\n            return merge(state, { depot_product_month_year: action.payload })\r\n        case UPDATE_DEPOT_PRODUCT_MONTH_MONTH:\r\n            return merge(state, { depot_product_month_month: action.payload })\r\n        case UPDATE_DEPOT:\r\n            return merge(state, { depot: action.payload })\r\n        case UPDATE_DEPOT_CUSTOMER_MONTH:\r\n            return merge(state, { depot_customer_month: action.payload })\r\n        case UPDATE_DEPOT_CUSTOMER_YEAR:\r\n            return merge(state, { depot_customer_year: action.payload })\r\n\r\n\r\n        case UPDATE_TOP_CUSTOMER_MONTH:\r\n            return merge(state, { top_customer_month: action.payload })\r\n\r\n        case UPDATE_TOP_CUSTOMER_YEAR:\r\n            return merge(state, { top_customer_year: action.payload })\r\n\r\n        case UPDATE_TOP_CUSTOMER_PRODUCT:\r\n            return merge(state, { top_customer_product: action.payload })\r\n\r\n        case UPDATE_SALES_DATE:\r\n            return merge(state, { sales_date: action.payload })\r\n        case UPLOAD_EXCEL:\r\n\r\n            return merge(state, { uploaded_excel: action.payload, upload_excel_error: null })\r\n\r\n        case UPLOAD_EXCEL_ERROR:\r\n\r\n            return merge(state, { upload_excel_error: action.payload })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default UPDATE_REDUCER","import { combineReducers } from \"redux\";\r\nimport storage from 'redux-persist/lib/storage'\r\nimport AuthReducer from \"./auth_reducer\";\r\n// import CreateReducer from \"./createReducers\"\r\nimport ListReducer from \"./list_reducer\";\r\nimport UpdateReducer from \"./update_reducer\";\r\nimport { USER_LOGGED_OUT } from \"../actions/types\"\r\n\r\n\r\nconst appReducer = combineReducers({\r\n    auth_reducer: AuthReducer,\r\n    // create_reducer:CreateReducer,\r\n    list_reducer: ListReducer,\r\n    update_reducer: UpdateReducer,\r\n})\r\n\r\nconst rootReducer = (state, action) => {\r\n    if (action.type === USER_LOGGED_OUT) {\r\n        // for all keys defined in your persistConfig(s)\r\n        storage.removeItem('persist:root')\r\n        // storage.removeItem('persist:otherKey')\r\n\r\n        state = undefined;\r\n    }\r\n    return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\"\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducers/reducer\"\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n\tkey: \"root\",\r\n\tstorage: storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\nexport const store = createStore(persistedReducer, applyMiddleware(thunk))\r\nexport const persistor = persistStore(store)","import React, { lazy, Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport SpinnerComponent from \"../components/utils/spinner\";\r\n\r\n\r\n// import LoginPage from \"../components/auth\";\r\n// import DepotPage from \"../components/depot\";\r\n// import HomePage from \"../components/home\";\r\n// import SalesPage from \"../components/sales\";\r\n// import CustomerPage from \"../components/customer\";\r\n// import DownloadExcelReport from \"../components/orders/excel\"\r\n\r\nconst LoginPage = lazy(() => import('../components/auth'));\r\nconst HomePage = lazy(() => import('../components/home'))\r\nconst DepotPage = lazy(() => import('../components/depot'))\r\nconst SalesPage = lazy(() => import('../components/sales'))\r\nconst CustomerPage = lazy(() => import('../components/customer'))\r\n\r\nclass RoutesComponent extends React.Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Suspense fallback={<SpinnerComponent spinner={true} />}>\r\n                    <Routes>\r\n                        <Route path=\"/login\" exact element={<LoginPage />} />\r\n                        <Route path=\"/\" exact element={<HomePage />} />\r\n                        <Route path=\"/sale\" exact element={<SalesPage />} />\r\n                        <Route path=\"/depots\" exact element={<DepotPage />} />\r\n                        <Route path=\"/customers\" exact element={<CustomerPage />} />\r\n                        {/* <Route path=\"/download_excel\" exact component={DownloadExcelReport} /> */}\r\n                    </Routes>\r\n                </Suspense>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoutesComponent;","import { Provider } from 'react-redux'\n\nimport Routes from './routes';\nimport { store } from './redux/store';\nimport './App.scss'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}