{"version":3,"file":"static/js/724.a9696ef2.chunk.js","mappings":"2VAIMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GA8BD,OA9BCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFC,MAAQ,CACJC,KAAM,IADF,EAcRC,MAAQ,SAACC,GAA2B,IAAnBC,EAAkB,wDAc/B,OAXc,IAAVA,EACMD,EAAOE,QAAO,SAACC,EAAaC,GAC9B,OAAOD,EAAcC,EAAOH,QAC7B,GAGGD,EAAOE,QAAO,SAACC,EAAaC,GAC9B,OAAOD,EAAcC,EAAOC,MAC7B,IAIV,EA+BA,OA/BA,wCA1BD,SAAiBC,GACb,OAAQA,EAAGC,WAAWC,QAAQ,wBAAyB,OAC1D,oBA0BD,WAEI,OACI,iBAAKC,UAAU,2BAAf,WACI,eAAIA,UAAU,iCAAd,SAAgDC,KAAKC,MAAMC,QAC3D,gBAAKH,UAAU,gBAAf,UACI,UAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAnC,WACI,4BACI,2BACI,yCACA,+CAGR,gCACyBC,IAApBR,KAAKb,MAAMC,MACR,2BACI,+BACA,kCAEJ,2BACI,wBAAKY,KAAKX,MAAMW,KAAKb,MAAMC,KAAKE,QAAQ,MACxC,wBAAKU,KAAKS,iBAAiBT,KAAKX,MAAMW,KAAKb,MAAMC,KAAKE,4BAQrF,EA7DCJ,CAAoBwB,EAAAA,WAApBxB,EAOKyB,yBAA2B,SAACV,EAAOd,GACtC,IAAIyB,EAASX,EAAMY,SAASC,QAAO,SAAAC,GAC/B,OAAOA,EAAIC,OAASC,SAAShB,EAAMiB,kBAGvC,OADA/B,EAAMC,KAAOwB,EAAO,GACbzB,GAoDf,IAUA,GAAegC,EAAAA,EAAAA,KAVS,SAAAhC,GACpB,MAAO,KAKgB,GAI3B,CAGED,G,8BCzDIkC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYnB,GAAQ,IAAD,yBACf,cAAMA,IAEDd,MAAQ,CAETkC,OAAQ,GACRC,QAAS,CACLC,MAAO,CACHC,KAAM,MACNC,OAAQ,KAGZC,MAAO,CACHC,KAAM,2BAEVC,YAAa,CACTC,IAAK,CACDC,YAAY,EACZC,YAAa,MACbC,YAAa,YAGrBC,WAAY,CACRC,SAAS,GAEbC,OAAQ,CACJC,MAAM,EACNC,MAAO,EACPC,OAAQ,CAAC,gBAEbC,MAAO,CACHb,MAAO,CACHC,KAAM,UAEVa,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAE9FC,MAAO,CACHf,MAAO,CACHC,KAAM,EAAK1B,MAAMyC,iBAAmB,kBAAoB,WAGhEC,KAAM,CACFC,QAAS,GAEbC,QAAS,CACLC,EAAG,CACCC,UAAW,EAAK9C,MAAMyC,iBAAmB,SAAUM,GAC/C,MAAO,QAAUA,EAAM,YACvB,SAAUA,GACV,OAAOA,EAAM,eAjDlB,EAsFlB,OA7BA,8BAkBD,WAEI,OAGI,gBAAKC,GAAG,QAAR,UACI,SAAC,IAAD,CAAgB3B,QAAStB,KAAKb,MAAMmC,QAASD,OAAQrB,KAAKb,MAAMkC,OAAQG,KAAK,MAAMC,OAAQ,YAKtG,EAvFCL,CAAsBV,EAAAA,WAAtBU,EA6DKT,yBAA2B,SAACV,EAAOd,GAEtC,IAAI+D,OAA0B1C,IAAnBP,EAAMY,SAlFT,SAACqC,EAAMlC,EAAMmC,GACzB,QAAa3C,IAAT0C,GAA+B,OAATA,GAAiBA,IAAS,GAChD,OAAO,KAEX,IAAItC,EAASsC,EAAKpC,QAAO,SAAAC,GACrB,OAAOA,EAAIC,OAASC,SAASD,MAG7B1B,EAAS,IAAI8D,MAAM,IAAIT,KAAK,GAIhC,IAAK,IAAMU,KAFXH,EAAOtC,EAAO0C,OAAS,EAAI1C,EAAO,GAAGtB,OAAS,GAEpB,CACtB,IAAIiE,EAAcL,EAAKG,GACvB/D,EAAOiE,EAAYC,YAAc,GAAuB,YAAlBL,GAA8BM,EAAAA,EAAAA,IAASF,EAAY5D,IAAM,MAAY8D,EAAAA,EAAAA,IAASF,EAAY5D,IAAM,KAE1I,OAAOL,EAkEuCoE,CAAQzD,EAAMY,SAAUZ,EAAMiB,cAAejB,EAAMkD,eAAiB,KAC1G9B,EAAS,CAAC,CACVnB,KAAMD,EAAMyC,iBAAmB,UAAY,WAC3CQ,KAAe,OAATA,EAAgB,GAAKA,IAM/B,OAHA/D,EAAMkC,OAASA,EACflC,EAAMmC,QAAQmB,MAAMf,MAAMC,KAAO1B,EAAMyC,iBAAmB,mBAAqB,oBAExEvD,GAkBf,IAUA,GAAegC,EAAAA,EAAAA,KAVS,SAAAhC,GACpB,MAAO,KAKgB,GAI3B,CAGEiC,GCpHIuC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAUiB,OAVjBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFxE,MAAQ,CACJ6B,KAAM,EAAKf,MAAMiB,eADb,EASR0C,iBAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAmB,WAAO5C,GAAP,iFACT,EAAKf,MAAM4D,4BAA4B7C,GAD9B,8FAAnB4C,GAAmB,EAwBlB,OAxBkB,8BAKnB,WAAU,IAAD,OAGL,OACI,gBAAK7D,UAAU,aAAf,UAEI,UAAC+D,EAAA,QAAD,CAAY/D,UAAU,yBAAyBgE,UAAU,4BAAzD,WACI,SAACD,EAAA,QAAD,oBACA,UAACA,EAAA,SAAD,CAAa,aAAW,yBAAyBvD,KAAK,KAAKyD,SAAU,SAACC,GAAD,OAAO,EAAKL,iBAAiBK,EAAEC,OAAOC,QAA3G,WACI,4BAASnE,KAAKb,MAAM6B,OARtB,CAAC,KAAM,MASEoD,KAAI,SAACpD,EAAMqD,GAAP,OACPpD,SAAS,EAAK9B,MAAM6B,QAAUA,EAAO,MAAO,mBAAkBmD,MAAOnD,EAAzB,SAAgCA,GAAnBqD,kBAQhF,EAlCCV,CAAuBjD,EAAAA,WAAvBiD,EAKKhD,yBAA2B,SAACV,EAAOd,GAEtC,OADAA,EAAM6B,KAAOC,SAAShB,EAAMiB,eACrB/B,GA8Bf,IAMMmF,EAAqB,CACvBT,4BAAAA,EAAAA,IAGJ,GAAe1C,EAAAA,EAAAA,KAVS,SAAAhC,GACpB,MAAO,CACH+B,cAAe/B,EAAMoF,eAAerD,iBAUxCoD,EAFJ,CAGEX,G,oBC3CIa,EAAe,SAACC,EAAO5D,GAKzB,OAJA4D,EAAQA,EAAM3D,QAAO,SAAU4D,GAC3B,OAAOA,EAAG7D,SAASX,OAASW,EAASX,SAKvCyE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAyFkB,OAzFlBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFxF,MAAQ,CACJyF,UAAU,EACVC,SAAS,EACTC,kBAAkB,EAClBC,YAAY,EACZC,cAAe,EAAK/E,MAAM+E,cAAgB,EAAK/E,MAAM+E,cAAgB,GACrEnE,SAAU,EAAKZ,MAAM+E,cAAgB,EAAK/E,MAAM+E,cAAc,GAAK,KACnEC,cAAe,KACfC,YAAa,KACbxC,iBAAkB,EAAKzC,MAAMyC,iBAC7BS,cAAe,EAAKlD,MAAMkD,cAC1BjC,cAAe,EAAKjB,MAAMiB,cAE1BuD,MAAO,IAbH,EAuDRU,eAAiB,SAAClB,GAEJ,KAANA,QAAkBzD,IAANyD,GAAyB,OAANA,EAC/B,EAAKmB,SAAS,CAAEJ,cAAe,EAAK/E,MAAM+E,gBAE1C,EAAKI,SAAS,CAAEH,cAAehB,KAEtC,EAEDoB,SAAW,SAACpB,GACRA,EAAEqB,iBACF,IAAQL,EAAkB,EAAK9F,MAAvB8F,cACJD,EAAgB,EAAK/E,MAAM+E,cAC/BA,EAAgBA,EAAclE,QAAO,SAAU4D,GAC3C,OAAOA,EAAGxE,KAAKqF,cAAcC,SAASP,EAAcM,kBAIxD,EAAKH,SAAS,CAAEJ,cAAeA,KAClC,EAEDS,QAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAU,WAAOC,GAAP,6EAENV,GADIA,EAAgB,EAAK7F,MAAM6F,eACDlE,QAAO,SAAU4D,GAC3C,OAAOA,EAAGzB,KAAOhC,SAASyE,OAGZpC,OAAS,GANrB,gCAOI,EAAK8B,SAAS,CAAEF,YAAaF,EAAc,GAAG/B,GAAI6B,kBAAkB,IAPxE,uBAQI,EAAK7E,MAAM0F,2BAA2BX,EAAc,GAAG/B,IAR3D,8FAAVwC,GAAU,EAYVG,mBAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAoB,qFAChB,EAAKR,SAAS,CAAEP,SAAS,IADT,SAEV,EAAK5E,MAAM4D,6BAA4B,IAAIgC,MAAOC,eAFxC,6CA+GnB,OA/GmB,8BAMpB,WAAU,IAAD,OACL,EAAmC9F,KAAKb,MAAhC0F,EAAR,EAAQA,QAAS3D,EAAjB,EAAiBA,cACb6E,EAAgB,KAEpB,IACIA,EAAgB/F,KAAKb,MAAMuD,iBAAmB1C,KAAKb,MAAM0B,SAASmF,QAAUhG,KAAKb,MAAM0B,SAASoF,SAClG,MAAOhC,IAIT,OAAIjE,KAAKb,MAAMyF,UACJ,SAAC,KAAD,CAAUsB,GAAI,YAIrB,UAAC,IAAD,CAAQC,aAAc,YAAtB,UACMtB,QAAwCrE,IAA7BR,KAAKC,MAAM+E,oBAA8DxE,IAA/BR,KAAKC,MAAMmG,iBAAiC,SAAC,IAAD,CAAkBvB,QAASA,IAAc,UAC9GrE,IAA7BR,KAAKC,MAAM+E,eACR,4BACI,0BACI,SAAC,EAAD,OAEJ,UAACqB,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,iBAAKxG,UAAU,2BAAf,WACI,6CAEA,UAAC+D,EAAA,EAAD,CAAM/D,UAAU,SAASyG,SAAUxG,KAAKqF,SAAxC,WACI,SAACoB,EAAA,EAAD,CACIjF,KAAK,SACLkF,YAAY,SACZ3G,UAAU,OACV,aAAW,SACXQ,KAAK,KACLyD,SAAU,SAACC,GAAD,OAAO,EAAKkB,eAAelB,EAAEC,OAAOC,WAElD,SAACwC,EAAA,EAAD,CAAQnF,KAAK,SAASoF,QAAQ,kBAAkBrG,KAAK,KAArD,wBAGJ,yBACKP,KAAKb,MAAM6F,cAAcZ,KAAI,SAACvD,EAAUwD,GAAX,OAC1B,gBAAetE,UAAW,wBAA1B,SACK,EAAKZ,MAAM+F,cAAgBrE,EAASoC,IAEjC,SAAC0D,EAAA,EAAD,CAAQ5G,UAAU,gDAAgD6G,QAAQ,cAAcnB,QAAS,kBAAM,EAAKA,QAAQ5E,EAASoC,KAA7H,UAEI,iBAAKlD,UAAU,sBAAf,WACI,gBAAKA,UAAU,4BAGf,0BACI,eAAIA,UAAU,sBAAd,SAAqCc,EAASX,eAK1D,SAACyG,EAAA,EAAD,CAAQ5G,UAAU,0BAA0B6G,QAAQ,cAAcnB,QAAS,kBAAM,EAAKA,QAAQ5E,EAASoC,KAAvG,UAEI,iBAAKlD,UAAU,sBAAf,WACI,gBAAKA,UAAU,4BAGf,0BACI,eAAIA,UAAU,sBAAd,SAAqCc,EAASX,eAtBxDmE,cAmC1B,SAACiC,EAAA,EAAD,CAAKC,GAAI,EAAGM,MAAO,CAAEC,SAAU,YAA/B,SACK9G,KAAKb,MAAM2F,uBAAsCtE,IAAlBuF,GAA8B,SAAC,IAAD,CAAkBlB,QAAS7E,KAAKb,MAAM2F,oBAChG,4BACI,SAAC,EAAD,CACIjE,SAAUkF,EACV7F,KAAMF,KAAKb,MAAM0B,SAAWb,KAAKb,MAAM0B,SAASX,KAAO,KACvDgB,cAAeA,KAEnB,SAAC,EAAD,CACIL,SAAUkF,EACV7E,cAAeA,EACfwB,iBAAkB1C,KAAKb,MAAMuD,iBAC7BS,cAAenD,KAAKb,MAAMgE,iBAG9B,4BACI,SAAC,IAAD,KACA,SAAC,IAAD,CAAY4D,WAAY/G,KAAKb,MAAMsF,MAAOuC,eAAe,kBAQxE,YAIxB,EAxMCrC,CAAqBjE,EAAAA,WAArBiE,EAiBKhE,yBAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAA2B,WAAOV,EAAOd,GAAd,8EACtB8H,EAA0ChH,EAA1CgH,MAAOjC,EAAmC/E,EAAnC+E,cAAeoB,EAAoBnG,EAApBmG,qBAChB5F,IAAVyG,GAAiC,KAAVA,EAFG,uBAG1B9H,EAAMyF,UAAW,EAHS,kBAInBzF,GAJmB,UAQA,OAAtBA,EAAM+F,kBAA4C1E,IAApB4F,EARR,wBAUtBjH,EAAM+F,YAAcF,EAAc,GAAG/B,GACrC9D,EAAM0F,SAAU,EAChB1F,EAAM2F,kBAAmB,EAZH,UAahB7E,EAAM0F,2BAA2BX,EAAc,GAAG/B,IAblC,qCAeGzC,IAApB4F,GAAiCjH,EAAM+F,aAAekB,EAAgBnD,IAE3E9D,EAAM0B,SAAWuF,EACjBjH,EAAMsF,MAAQD,EAAavE,EAAMwE,MAAO2B,GACxCjH,EAAM2F,kBAAmB,EACzB3F,EAAM0F,SAAU,QAESrE,IAApB4F,GAAiCjH,EAAM+F,cAAgBkB,EAAgBnD,GAC5E9D,EAAM2F,kBAAmB,GAGzB3F,EAAM0F,SAAU,EAChB1F,EAAM2F,kBAAmB,EACzB3F,EAAM+F,YAAcjF,EAAMmG,gBAAgBnD,IA5BpB,eAgC9B9D,EAAM6F,cAAgBA,EACtB7F,EAAMuD,iBAAmBzC,EAAMyC,iBAC/BvD,EAAMgE,cAAgBlD,EAAMkD,cAC5BhE,EAAM+B,cAAgBjB,EAAMiB,cAnCE,kBAqCvB/B,GArCuB,iGAA3BwB,GA0LX,IAaM2D,EAAqB,CACvB4C,yBAAAA,EAAAA,GACAvB,2BAAAA,EAAAA,GACA9B,4BAAAA,EAAAA,IAIJ,GAAe1C,EAAAA,EAAAA,KApBS,SAAAhC,GACpB,MAAO,CACH8H,MAAO9H,EAAMgI,aAAaF,MAC1BjC,cAAe7F,EAAMiI,aAAapC,cAClCoB,gBAAiBjH,EAAMiI,aAAahB,gBACpC1D,iBAAkBvD,EAAMoF,eAAe7B,iBACvCS,cAAehE,EAAMoF,eAAepB,cACpCjC,cAAe/B,EAAMoF,eAAerD,cAEpCuD,MAAOtF,EAAMiI,aAAaL,cAa9BzC,EAFJ,CAGEK,I,qGC3PK,IAAM0C,EAAY,SAACC,EAAMhI,GAE5B,OADAgI,EAAKC,SAASD,EAAKE,WAAalI,GACzBgI,GAGEG,EAAwB,SAACtE,GAClC,MAAsB,YAAlBA,EACO,IAGA,KAIFM,EAAW,SAACiE,GACrB,OAAOC,WAAWD,EAAI7H,WAAW+H,MAAM,wBAAwB","sources":["components/customer/top.js","components/customer/charts/customer_month.js","components/utils/select/customer_select.js","components/customer/index.js","components/utils/_funcs.js"],"sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Table } from \"react-bootstrap\"\r\n\r\nclass CustomerTop extends React.Component {\r\n    state = {\r\n        info: []\r\n    }\r\n    numberWithCommas(x) {\r\n        return (x).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        let result = props.customer.filter(obj => {\r\n            return obj.year === parseInt(props.customer_year)\r\n        })\r\n        state.info = result[0]\r\n        return state\r\n    }\r\n\r\n    total = (months, count = false) => {\r\n        let sum = 0\r\n\r\n        if (count === true) {\r\n            sum = months.reduce((accumulator, object) => {\r\n                return accumulator + object.count;\r\n            }, 0);\r\n        }\r\n        else {\r\n            sum = months.reduce((accumulator, object) => {\r\n                return accumulator + object.sum;\r\n            }, 0);\r\n        }\r\n\r\n        return sum\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"customer-content__header\">\r\n                <h5 className=\"customer-content__header__name\">{this.props.name}</h5>\r\n                <div className=\"customer-info\">\r\n                    <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Total Sales</th>\r\n                                <th>Total Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.info === undefined ?\r\n                                <tr>\r\n                                    <td>0</td>\r\n                                    <td>0</td>\r\n                                </tr> :\r\n                                <tr>\r\n                                    <td>{this.total(this.state.info.months, true)}</td>\r\n                                    <td>{this.numberWithCommas(this.total(this.state.info.months))}</td>\r\n                                </tr>}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerTop);\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport { truncate } from \"../../utils/_funcs\";\r\n\r\nconst mapData = (data, year, currency_type) => {\r\n    if (data === undefined || data === null || data === []) {\r\n        return null\r\n    }\r\n    let result = data.filter(obj => {\r\n        return obj.year === parseInt(year)\r\n    })\r\n\r\n    let months = new Array(12).fill(0)\r\n\r\n    data = result.length > 0 ? result[0].months : []\r\n\r\n    for (const month in data) {\r\n        let month_value = data[month]\r\n        months[month_value.date__month - 1] = currency_type === \"Million\" ? truncate(month_value.sum / 10000000) : truncate(month_value.sum / 1000)\r\n    }\r\n    return months\r\n}\r\n\r\nclass CustomerMonth extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n\r\n                title: {\r\n                    text: 'Monthly Sale Comparison'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '55%',\r\n                        endingShape: 'rounded'\r\n                    },\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                stroke: {\r\n                    show: true,\r\n                    width: 2,\r\n                    colors: ['transparent']\r\n                },\r\n                xaxis: {\r\n                    title: {\r\n                        text: 'Months'\r\n                    },\r\n                    categories: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: this.props.dashboard_metric ? 'Kshs (Millions)' : \"Litres\"\r\n                    }\r\n                },\r\n                fill: {\r\n                    opacity: 1\r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return \"Kshs \" + val + \" Million\"\r\n                        } : function (val) {\r\n                            return val + \" Litres\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n\r\n        };\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n\r\n        let data = props.customer !== undefined ? mapData(props.customer, props.customer_year, props.currency_type) : null\r\n        let series = [{\r\n            name: props.dashboard_metric ? \"Revenue\" : \"Quantity\",\r\n            data: data === null ? [] : data\r\n        }]\r\n\r\n        state.series = series\r\n        state.options.yaxis.title.text = props.dashboard_metric ? \"Customer Revenue\" : \"Customer Quantity\"\r\n\r\n        return state\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n\r\n            <div id=\"chart\">\r\n                <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={350} />\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerMonth);\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n    UPDATE_DASHBOARD_CUSTOMER_MONTH_ACTION,\r\n    UPDATE_DASHBOARD_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_DASHBOARD_CUSTOMER_PRODUCT_ACTION,\r\n    UPDATE_CUSTOMER_YEAR_ACTION,\r\n} from \"../../../redux/actions/actions\"\r\n\r\n\r\nclass CustomerSelect extends React.Component {\r\n    state = {\r\n        year: this.props.customer_year,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        state.year = parseInt(props.customer_year)\r\n        return state\r\n    }\r\n\r\n    handleYearChange = async (year) => {\r\n        await this.props.UPDATE_CUSTOMER_YEAR_ACTION(year)\r\n    }\r\n\r\n\r\n    render() {\r\n        const years = [2022, 2021]\r\n\r\n        return (\r\n            <div className=\"pie-select\">\r\n\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleYearChange(e.target.value)}>\r\n                        <option>{this.state.year}</option>\r\n                        {years.map((year, idx) =>\r\n                            parseInt(this.state.year) === year ? null : <option key={idx} value={year}>{year}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customer_year: state.update_reducer.customer_year\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_CUSTOMER_YEAR_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerSelect);\r\n","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Row, Col, Form, FormControl, Button } from 'react-bootstrap';\r\nimport { Navigate } from 'react-router-dom';\r\nimport Layout from '../utils/layout';\r\nimport {\r\n    GET_CUSTOMER_LIST_ACTION,\r\n    GET_CUSTOMER_DETAIL_ACTION,\r\n    UPDATE_CUSTOMER_YEAR_ACTION,\r\n} from \"../../redux/actions/actions\"\r\nimport CustomerTop from \"./top\"\r\n\r\nimport SpinnerComponent from '../utils/spinner';\r\nimport CustomerMonth from './charts/customer_month';\r\nimport CustomerSelect from '../utils/select/customer_select';\r\nimport SalesDateSelector from '../sales/sales_date_selector';\r\nimport SalesTable from '../sales/sales_table';\r\n\r\nconst getCustomers = (sales, customer) => {\r\n    sales = sales.filter(function (or) {\r\n        return or.customer.name === customer.name\r\n    });\r\n\r\n    return sales\r\n}\r\nclass CustomerPage extends React.Component {\r\n    state = {\r\n        redirect: false,\r\n        spinner: false,\r\n        customer_spinner: false,\r\n        didnt_load: false,\r\n        customer_list: this.props.customer_list ? this.props.customer_list : [],\r\n        customer: this.props.customer_list ? this.props.customer_list[0] : null,\r\n        customer_name: null,\r\n        customer_id: null,\r\n        dashboard_metric: this.props.dashboard_metric,\r\n        currency_type: this.props.currency_type,\r\n        customer_year: this.props.customer_year,\r\n\r\n        sales: [],\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n        const { token, customer_list, customer_detail } = props\r\n        if (token === undefined || token === \"\") {\r\n            state.redirect = true\r\n            return state\r\n        }\r\n        else {\r\n\r\n            if (state.customer_id === null || customer_detail === undefined) {\r\n\r\n                state.customer_id = customer_list[0].id\r\n                state.spinner = false\r\n                state.customer_spinner = true\r\n                await props.GET_CUSTOMER_DETAIL_ACTION(customer_list[0].id)\r\n            }\r\n            else if (customer_detail !== undefined && state.customer_id == customer_detail.id) {\r\n\r\n                state.customer = customer_detail\r\n                state.sales = getCustomers(props.sales, customer_detail)\r\n                state.customer_spinner = false\r\n                state.spinner = false\r\n            }\r\n            else if (customer_detail !== undefined && state.customer_id !== customer_detail.id) {\r\n                state.customer_spinner = true\r\n            }\r\n            else {\r\n                state.spinner = false\r\n                state.customer_spinner = false\r\n                state.customer_id = props.customer_detail.id\r\n            }\r\n        }\r\n\r\n        state.customer_list = customer_list\r\n        state.dashboard_metric = props.dashboard_metric\r\n        state.currency_type = props.currency_type\r\n        state.customer_year = props.customer_year\r\n\r\n        return state\r\n    }\r\n    onSearchChange = (e) => {\r\n\r\n        if (e === \"\" || e === undefined || e === null) {\r\n            this.setState({ customer_list: this.props.customer_list })\r\n        } else {\r\n            this.setState({ customer_name: e })\r\n        }\r\n    }\r\n\r\n    onSearch = (e) => {\r\n        e.preventDefault()\r\n        const { customer_name } = this.state\r\n        let customer_list = this.props.customer_list\r\n        customer_list = customer_list.filter(function (or) {\r\n            return or.name.toLowerCase().includes(customer_name.toLowerCase())\r\n        });\r\n\r\n\r\n        this.setState({ customer_list: customer_list })\r\n    }\r\n\r\n    onClick = async (index) => {\r\n        let customer_list = this.state.customer_list\r\n        customer_list = customer_list.filter(function (or) {\r\n            return or.id === parseInt(index)\r\n        });\r\n\r\n        if (customer_list.length > 0) {\r\n            await this.setState({ customer_id: customer_list[0].id, customer_spinner: true })\r\n            await this.props.GET_CUSTOMER_DETAIL_ACTION(customer_list[0].id)\r\n        }\r\n\r\n    }\r\n    componentDidMount = async () => {\r\n        this.setState({ spinner: true })\r\n        await this.props.UPDATE_CUSTOMER_YEAR_ACTION(new Date().getFullYear())\r\n    }\r\n\r\n\r\n    render() {\r\n        const { spinner, customer_year } = this.state\r\n        let customer_data = null\r\n\r\n        try {\r\n            customer_data = this.state.dashboard_metric ? this.state.customer.revenue : this.state.customer.quantity\r\n        } catch (e) {\r\n\r\n        }\r\n\r\n        if (this.state.redirect) {\r\n            return <Navigate to={\"/login\"} />\r\n        }\r\n\r\n        return (\r\n            <Layout header_title={\"CUSTOMERS\"}>\r\n                {(spinner || this.props.customer_list === undefined || this.props.customer_detail === undefined) ? <SpinnerComponent spinner={spinner} /> : null}\r\n                {this.props.customer_list !== undefined ?\r\n                    <div>\r\n                        <div>\r\n                            <CustomerSelect />\r\n                        </div>\r\n                        <Row>\r\n                            <Col xs={3}>\r\n                                <div className=\"customer-side chart-area\">\r\n                                    <h6>Pick a customer</h6>\r\n\r\n                                    <Form className=\"d-flex\" onSubmit={this.onSearch}>\r\n                                        <FormControl\r\n                                            type=\"search\"\r\n                                            placeholder=\"Search\"\r\n                                            className=\"me-2\"\r\n                                            aria-label=\"Search\"\r\n                                            size='sm'\r\n                                            onChange={(e) => this.onSearchChange(e.target.value)}\r\n                                        />\r\n                                        <Button type=\"submit\" variant=\"outline-primary\" size=\"sm\">Search</Button>\r\n                                    </Form>\r\n\r\n                                    <div>\r\n                                        {this.state.customer_list.map((customer, idx) =>\r\n                                            <div key={idx} className={\"customer-side__scroll\"}>\r\n                                                {this.state.customer_id === customer.id ?\r\n\r\n                                                    <Button className='customer-side__customer customer-side__active' variant=\"transparent\" onClick={() => this.onClick(customer.id)}>\r\n\r\n                                                        <div className='customer-side__info'>\r\n                                                            <div className='customer-side__profile'>\r\n\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <h6 className='customer-side__name'>{customer.name}</h6>\r\n                                                                {/* <p className='customer-location'>{customer.location}</p> */}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Button> :\r\n                                                    <Button className='customer-side__customer' variant=\"transparent\" onClick={() => this.onClick(customer.id)}>\r\n\r\n                                                        <div className='customer-side__info'>\r\n                                                            <div className='customer-side__profile'>\r\n\r\n                                                            </div>\r\n                                                            <div>\r\n                                                                <h6 className='customer-side__name'>{customer.name}</h6>\r\n                                                                {/* <p className='customer-location'>{customer.location}</p> */}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Button>}\r\n                                            </div>\r\n                                        )}\r\n\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </Col>\r\n                            <Col xs={9} style={{ position: \"relative\" }}>\r\n                                {this.state.customer_spinner || customer_data === undefined ? <SpinnerComponent spinner={this.state.customer_spinner} /> :\r\n                                    <div>\r\n                                        <CustomerTop\r\n                                            customer={customer_data}\r\n                                            name={this.state.customer ? this.state.customer.name : null}\r\n                                            customer_year={customer_year}\r\n                                        />\r\n                                        <CustomerMonth\r\n                                            customer={customer_data}\r\n                                            customer_year={customer_year}\r\n                                            dashboard_metric={this.state.dashboard_metric}\r\n                                            currency_type={this.state.currency_type}\r\n                                        />\r\n\r\n                                        <div>\r\n                                            <SalesDateSelector />\r\n                                            <SalesTable sales_list={this.state.sales} from_customer={true} />\r\n                                        </div>\r\n\r\n                                    </div>}\r\n\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </div> : null\r\n                }\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth_reducer.token,\r\n        customer_list: state.list_reducer.customer_list,\r\n        customer_detail: state.list_reducer.customer_detail,\r\n        dashboard_metric: state.update_reducer.dashboard_metric,\r\n        currency_type: state.update_reducer.currency_type,\r\n        customer_year: state.update_reducer.customer_year,\r\n\r\n        sales: state.list_reducer.sales_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    GET_CUSTOMER_LIST_ACTION,\r\n    GET_CUSTOMER_DETAIL_ACTION,\r\n    UPDATE_CUSTOMER_YEAR_ACTION,\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerPage);\r\n","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}"],"names":["CustomerTop","state","info","total","months","count","reduce","accumulator","object","sum","x","toString","replace","className","this","props","name","Table","striped","bordered","hover","size","undefined","numberWithCommas","React","getDerivedStateFromProps","result","customer","filter","obj","year","parseInt","customer_year","connect","CustomerMonth","series","options","chart","type","height","title","text","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","show","width","colors","xaxis","categories","yaxis","dashboard_metric","fill","opacity","tooltip","y","formatter","val","id","data","currency_type","Array","month","length","month_value","date__month","truncate","mapData","CustomerSelect","handleYearChange","UPDATE_CUSTOMER_YEAR_ACTION","Form","controlId","onChange","e","target","value","map","idx","mapDispatchToProps","update_reducer","getCustomers","sales","or","CustomerPage","redirect","spinner","customer_spinner","didnt_load","customer_list","customer_name","customer_id","onSearchChange","setState","onSearch","preventDefault","toLowerCase","includes","onClick","index","GET_CUSTOMER_DETAIL_ACTION","componentDidMount","Date","getFullYear","customer_data","revenue","quantity","to","header_title","customer_detail","Row","Col","xs","onSubmit","FormControl","placeholder","Button","variant","style","position","sales_list","from_customer","token","GET_CUSTOMER_LIST_ACTION","auth_reducer","list_reducer","addMonths","date","setMonth","getMonth","currency_type_display","num","parseFloat","match"],"sourceRoot":""}