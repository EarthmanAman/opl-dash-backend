{"version":3,"sources":["components/depot/charts/depot_series.js","components/utils/_funcs.js"],"names":["mapData","data","dashboard_metric","currency_type","values","i","length","push","Date","date","getTime","truncate","sum","quantity","DepotSeriesChart","props","state","spinner","series","selection_dates","options","chart","id","type","height","zoom","autoScaleYaxis","title","text","annotations","xaxis","x","startDate","borderColor","yAxisIndex","dataLabels","enabled","markers","size","style","tickAmount","yaxis","min","tooltip","format","y","formatter","val","selection","ApexCharts","exec","this","endDate","e","position","React","Component","getDerivedStateFromProps","depot_series","update_product_series","update_depot_series","concat","name","revenue","currency_type_display","addMonths","months","setMonth","getMonth","num","parseFloat","toString","match"],"mappings":"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","file":"static/js/24.1e76402c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport ApexCharts from 'apexcharts';\r\nimport { currency_type_display, truncate } from \"../../utils/_funcs\"\r\nimport SpinnerComponent from '../../utils/spinner';\r\n\r\nconst mapData = (data, dashboard_metric, currency_type) => {\r\n    let values = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        values.push(\r\n            [\r\n                new Date(data[i].date).getTime(),\r\n                currency_type === \"Million\" ? truncate((dashboard_metric ? data[i].sum : data[i].quantity) / 1000000) : truncate((dashboard_metric ? data[i].sum : data[i].quantity) / 1000)\r\n            ]\r\n        )\r\n    }\r\n\r\n    return values\r\n}\r\nclass DepotSeriesChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            spinner: false,\r\n            series: [],\r\n            currency_type: this.props.currency_type,\r\n            selection_dates: this.props.selection_dates,\r\n            options: {\r\n                chart: {\r\n                    id: 'area-datetime',\r\n                    type: 'area',\r\n                    height: 400,\r\n                    zoom: {\r\n                        autoScaleYaxis: false\r\n                    }\r\n                },\r\n                title: {\r\n                    text: this.props.dashboard_metric ? \"Revenue\" : \"Quantities\"\r\n                },\r\n                annotations: {\r\n\r\n                    xaxis: [{\r\n                        x: new Date(`${this.props.selection_dates.startDate}`).getTime(),\r\n                        borderColor: '#999',\r\n                        yAxisIndex: 0,\r\n\r\n                    }]\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                markers: {\r\n                    size: 0,\r\n                    style: 'hollow',\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                    // min: new Date(`${this.props.selection_dates.startDate}`).getTime(),\r\n                    // max: new Date(`${this.props.selection_dates.endDate}`).getTime(),\r\n                    tickAmount: 5,\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: 'Kshs (Millions)'\r\n                    },\r\n                    min: 0,\r\n                },\r\n                tooltip: {\r\n                    x: {\r\n                        format: 'dd MMM yyyy'\r\n                    },\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return `Kshs ${val} Millions`\r\n                        } : function (val) {\r\n                            return `${val} Litres`\r\n                        }\r\n                    }\r\n                },\r\n                // fill: {\r\n                //   type: 'gradient',\r\n                //   gradient: {\r\n                //     shadeIntensity: 1,\r\n                //     opacityFrom: 0.7,\r\n                //     opacityTo: 0.9,\r\n                //     stops: [0, 100]\r\n                //   }\r\n                // },\r\n            },\r\n\r\n\r\n            selection: 'one_month',\r\n\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        const { depot_series, update_product_series, dashboard_metric, selection_dates, currency_type, update_depot_series } = props\r\n\r\n        if (update_depot_series || update_product_series) {\r\n            state.spinner = true\r\n            return state\r\n        } else {\r\n            state.spinner = false\r\n        }\r\n        let data = depot_series\r\n\r\n        let series = []\r\n        // let _depot = dashboard_metric ? data.revenue : data.quantity\r\n        if (typeof (selection_dates.startDate) === \"string\") {\r\n            selection_dates.startDate = new Date(`${selection_dates.startDate}`)\r\n            selection_dates.endDate = new Date(`${selection_dates.endDate}`)\r\n        }\r\n        series = series.concat({\r\n            name: data.name,\r\n            data: mapData(data.revenue, dashboard_metric, currency_type)\r\n        })\r\n\r\n        state.series = series\r\n        state.options.title.text = dashboard_metric ? \"Revenue\" : \"Quantities\"\r\n        // state.options.xaxis.min = selection_dates.startDate.getTime()\r\n        // state.options.xaxis.max = selection_dates.endDate.getTime()\r\n        state.options.yaxis.title.text = dashboard_metric ? `Kshs (${currency_type})` : `Litres (${currency_type})`\r\n        state.options.tooltip.y.formatter = dashboard_metric ? function (val) {\r\n            return `Kshs ${val}${currency_type_display(currency_type)}`\r\n        } : function (val) {\r\n            return `${val}${currency_type_display(currency_type)} Litres`\r\n        }\r\n        state.selection_dates = selection_dates\r\n        state.currency_type = currency_type\r\n        return state\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        try {\r\n\r\n            ApexCharts.exec(\r\n                'area-datetime',\r\n                'zoomX',\r\n                new Date(`${this.state.selection_dates.startDate}`).getTime(),\r\n                new Date(`${this.state.selection_dates.endDate}`).getTime(),\r\n\r\n            )\r\n        } catch (e) {\r\n            \"in error\"\r\n        }\r\n        return (\r\n            <div id=\"chart\" >\r\n                {this.state.spinner ? <div style={{ height: 400, position: \"relative\" }}><SpinnerComponent spinner={this.state.spinner} /></div> :\r\n                    <div id=\"chart-timeline\">\r\n                        <ReactApexChart options={this.state.options} series={this.state.series} type=\"area\" height={400} />\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default DepotSeriesChart","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}"],"sourceRoot":""}