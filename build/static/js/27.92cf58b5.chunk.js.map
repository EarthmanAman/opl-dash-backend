{"version":3,"sources":["components/sales/create.js","components/customer/create.js","components/customer/customer_add.js","components/sales/upload.js","components/home/download_template.js","components/customer/truck_create.js","components/home/input_section.js","../node_modules/react-bootstrap/esm/Row.js"],"names":["SaleCreateForm","state","product","customer","truck","entry_no","order_no","lpo_no","depot","date","Date","vol_obs","vol_20","selling_price","products","paid","loading_date","amount_paid","seal_no","remarks","trucks","spinner","success","null_error","componentWillReceiveProps","nextProps","a","setState","handleCustomerSelect","id","props","customers","parseInt","onSubmit","e","preventDefault","items","i","length","undefined","sales_date","SALES_CREATE_ACTION","start_date","end_date","this","depots","concat","truck_list","className","style","color","fontSize","Alert","variant","size","Form","Row","marginTop","height","Col","Group","controlId","Label","Control","type","placeholder","value","onChange","target","Select","map","idx","name","plate_no","driver","Check","inline","label","onClick","as","rows","align","Button","React","Component","mapDispatchToProps","connect","list_reducer","depot_list","product_list","customer_list","sales_list","update_reducer","CustomerUpload","location","show_errors","event","CUSTOMER_CREATE_ACTION","width","timeout","visible","getDerivedStateFromProps","CustomerAdd","handleDepotSelect","ADD_CUSTOMER_ACTION","componentDidMount","ADD_CUSTOMER_REMOVE_ACTION","add_customer","status","UploadExcel","file","show_error","upload_excel_error","UPLOAD_EXCEL_ACTION","message","accept","files","uploaded_excel","DownloadTemplate","window","open","URL","TruckUpload","customer_index","first_name","last_name","UPDATE_GET_TRUCK_LIST_ACTION","TRUCK_CREATE_ACTION","update_get_truck_list","InputComponent","startDate","selection_dates","endDate","dashboard_metric","key","handleMetricChange","UPDATE_DASHBOARD_METRIC_ACTION","handleSelect","ranges","selection","UPDATE_SELECTION_DATES_ACTION","GET_PRODUCT_SERIES_ACTION","UPDATE_PRODUCT_SERIES_ACTION","GET_DEPOT_SERIES_ACTION","GET_DEPOT_PRODUCT_SERIES_ACTION","trigger","toDateString","position","showSelectionPreview","moveRangeOnFirstSelection","months","direction","preventSnapRefocus","calendarFocus","contentStyle","minHeight","ref","bsPrefix","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName"],"mappings":"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","file":"static/js/27.92cf58b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Row, Col, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport SpinnerComponent from \"../utils/spinner\"\r\n\r\nimport { SALES_CREATE_ACTION } from '../../redux/actions/actions';\r\nimport { sassNull } from 'sass';\r\n\r\nclass SaleCreateForm extends React.Component {\r\n    state = {\r\n        product: null,\r\n        customer: null,\r\n        truck: null,\r\n        entry_no: null,\r\n        order_no: null,\r\n        lpo_no: null,\r\n        depot: null,\r\n        date: new Date(),\r\n        vol_obs: null,\r\n        vol_20: null,\r\n        selling_price: null,\r\n        products: [],\r\n        paid: true,\r\n\r\n        loading_date: null,\r\n        amount_paid: null,\r\n        seal_no: null,\r\n        remarks: null,\r\n\r\n        trucks: [],\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n\r\n        this.setState({ spinner: false, success: true })\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        let customer = this.props.customers[parseInt(id)]\r\n        this.setState({ customer: customer.id, trucks: customer.trucks })\r\n    }\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const {\r\n            product, lpo_no, customer, truck,\r\n            depot, entry_no, order_no, date, vol_obs,\r\n            vol_20, selling_price, paid, loading_date,\r\n            seal_no, amount_paid, remarks } = this.state\r\n\r\n        let items = [product, customer, truck, depot, order_no, date, vol_obs, selling_price]\r\n        let null_error = false\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i] === null || items[i] === \"\" || items[i] === undefined) {\r\n                null_error = true\r\n            }\r\n        }\r\n\r\n        if (null_error) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            const { sales_date } = this.props\r\n            await this.props.SALES_CREATE_ACTION(\r\n                sales_date.start_date, sales_date.end_date,\r\n                product, lpo_no, customer, truck, depot,\r\n                entry_no, order_no, date, vol_obs, vol_20, selling_price, paid,\r\n                loading_date, seal_no, amount_paid, remarks\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let { date, loading_date, trucks } = this.state\r\n        const { depots, customers, products } = this.props\r\n        trucks = trucks.concat(this.props.truck_list)\r\n\r\n        return (\r\n            <div className='upload-form'>\r\n\r\n                {/* SPINNER */}\r\n                {this.state.spinner ?\r\n                    <SpinnerComponent spinner={this.state.spinner} /> : null}\r\n\r\n                {/* FORM */}\r\n                <h4 className='upload-title'>Fill the information</h4>\r\n                <p style={{ color: \"brown\", fontSize: 12 }}>All field mark with * must be filled</p>\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Entry Created successful\r\n                    </Alert> : null}\r\n\r\n                {/* Null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the fields must be field\r\n                    </Alert> : null}\r\n\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Date <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Control type=\"date\" placeholder=\"Date\" size='sm' value={date} onChange={(e) => this.setState({ date: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Loading Date</Form.Label>\r\n                                <Form.Control type=\"date\" placeholder=\"Date\" size='sm' value={loading_date} onChange={(e) => this.setState({ loading_date: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Depot <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {depots.map((depot, idx) =>\r\n                                        <option value={depot.id}>{depot.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Customer <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                                    <option>Select</option>\r\n                                    {customers.map((customer, idx) =>\r\n                                        <option value={idx}>{customer.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Truck <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ truck: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {trucks.map((truck) =>\r\n                                        <option value={truck.id}>{truck.plate_no} - {truck.driver}</option>\r\n                                    )}\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Product <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ product: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {products.map((product) =>\r\n                                <option value={product.id}>{product.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Details</h6>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Order No <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Order No\" size='sm' onChange={(e) => this.setState({ order_no: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Lpo no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Lpo no\" size='sm' onChange={(e) => this.setState({ lpo_no: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Entry no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Entry No\" size='sm' onChange={(e) => this.setState({ entry_no: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Seal no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Seal no\" size='sm' onChange={(e) => this.setState({ seal_no: e.target.value })} />\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol OBS <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol OBS\" size='sm' onChange={(e) => this.setState({ vol_obs: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol@20</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol@20\" size='sm' onChange={(e) => this.setState({ vol_20: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Selling Price <span style={{ color: \"brown\" }}>*</span></Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Selling price\" size='sm' onChange={(e) => this.setState({ selling_price: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Amount Paid</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Amount Paid\" size='sm' onChange={(e) => this.setState({ amount_paid: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Paid</Form.Label>\r\n                        <div key={`inline-radio`} className=\"mb-3\">\r\n\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"Yes\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-1`}\r\n                                onClick={() => this.setState({ paid: true })}\r\n                            />\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"No\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-2`}\r\n                                onClick={() => this.setState({ paid: false })}\r\n                            />\r\n\r\n                        </div>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Remarks</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={3} onChange={(e) => this.setState({ remarks: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <div align='center'>\r\n                        <Button variant='primary' type='submit'>Upload</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depots: (state.list_reducer.depot_list ? state.list_reducer.depot_list : []),\r\n        products: (state.list_reducer.product_list ? state.list_reducer.product_list : []),\r\n        customers: (state.list_reducer.customer_list ? state.list_reducer.customer_list : []),\r\n        truck_list: (state.list_reducer.truck_list ? state.list_reducer.truck_list : []),\r\n        sales_list: (state.list_reducer.sales_list ? state.list_reducer.sales_list : []),\r\n        sales_date: state.update_reducer.sales_date,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    SALES_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SaleCreateForm);\r\n","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { CUSTOMER_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerUpload extends React.Component {\r\n    state = {\r\n        name: \"\",\r\n        location: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (props.customer_list === undefined) {\r\n            return null\r\n        }\r\n\r\n        else if (state.customer_list === undefined && props.customer_list !== undefined) {\r\n\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        else if (props.customer_list.length > state.customer_list.length) {\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        state.customer_list = props.customer_list\r\n        return state\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { name, location } = this.state\r\n\r\n        if (name === \"\" || location === \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.CUSTOMER_CREATE_ACTION(name, location)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Create Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.name}\r\n                            onChange={(e) => this.setState({ name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Code</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.location}\r\n                            onChange={(e) => this.setState({ location: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Create</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customer_list: state.list_reducer.customer_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    CUSTOMER_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerUpload);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { ADD_CUSTOMER_ACTION, ADD_CUSTOMER_REMOVE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerAdd extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        depot: null,\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        if (props.add_customer !== undefined) {\r\n            if (props.add_customer.status === \"success\") {\r\n                state.spinner = false\r\n                state.success = true\r\n                state.null_error = false\r\n            }\r\n            else {\r\n                state.spinner = false\r\n                state.show_errors = true\r\n            }\r\n        }\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        this.setState({ customer: id })\r\n    }\r\n    handleDepotSelect = (id) => {\r\n        this.setState({ depot: id })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot, customer } = this.state\r\n\r\n        if (depot === null || customer === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.ADD_CUSTOMER_ACTION(depot, customer)\r\n        }\r\n\r\n    }\r\n    componentDidMount = async () => {\r\n        await this.props.ADD_CUSTOMER_REMOVE_ACTION()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer Added successfull\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {this.state.show_errors ?\r\n\r\n                    <Alert variant=\"danger\">Something went wrong!</Alert>\r\n\r\n                    : null}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleDepotSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.depots.map((depot, idx) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={customer.id}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        depots: state.list_reducer.depot_list,\r\n        add_customer: state.update_reducer.add_customer,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    ADD_CUSTOMER_ACTION,\r\n    ADD_CUSTOMER_REMOVE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerAdd);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Alert, Button } from 'react-bootstrap'\r\nimport { Triangle } from \"react-loader-spinner\"\r\n\r\nimport { UPLOAD_EXCEL_ACTION } from \"../../redux/actions/actions\"\r\n\r\nclass UploadExcel extends React.Component {\r\n\r\n    state = {\r\n        file: null,\r\n        spinner: false,\r\n        success: false,\r\n        show_error: false,\r\n        null_error: false,\r\n        depot: null,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n        if (nextProps.upload_excel_error) {\r\n            this.setState({ show_error: true, spinner: false })\r\n        } else {\r\n            this.setState({ spinner: false, success: true })\r\n        }\r\n\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const { file, depot } = this.state\r\n        if (file === null || depot === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.UPLOAD_EXCEL_ACTION(file, depot)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h5>Upload File</h5>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        File Uploaded successful\r\n                    </Alert> : null}\r\n\r\n                {/* If error */}\r\n                {this.state.show_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        {this.props.upload_excel_error.message}\r\n                    </Alert> : null}\r\n\r\n                {/* If null */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the field must be filled\r\n                    </Alert> : null}\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>File</Form.Label>\r\n                        <Form.Control\r\n                            type=\"file\"\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            placeholder=\"File\"\r\n                            size='sm'\r\n                            onChange={(e) => this.setState({ file: e.target.files[0] })}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button\r\n                            variant='primary'\r\n                            type='submit'\r\n\r\n                            value={this.state.file}\r\n                            size='sm'\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        uploaded_excel: state.update_reducer.uploaded_excel,\r\n        upload_excel_error: state.update_reducer.upload_excel_error,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPLOAD_EXCEL_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UploadExcel);\r\n","import React from 'react';\r\nimport { URL } from \"../../utils/_consts\"\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DownloadTemplate extends React.Component {\r\n    state = {\r\n        depot: null,\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot } = this.state\r\n\r\n        window.open(`${URL}/depot/download/${parseInt(depot)}/`, \"_blank\")\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                <h4>Download Template</h4>\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm'>Download</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DownloadTemplate);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { TRUCK_CREATE_ACTION, UPDATE_GET_TRUCK_LIST_ACTION } from '../../redux/actions/actions';\r\n\r\nclass TruckUpload extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        customers: [],\r\n        customer_index: null,\r\n        plate_no: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n        truck_list: this.props.truck_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (props.update_get_truck_list === false) {\r\n            state.spinner = false\r\n            state.null_error = false\r\n            // state.success = true\r\n            state.show_errors = false\r\n        }\r\n        if (state.customer_index !== null) {\r\n            if (props.customers[parseInt(state.customer_index)].trucks.length > state.customers[parseInt(state.customer_index)].trucks.length) {\r\n                state.success = true\r\n            } else {\r\n                // state.success = false\r\n            }\r\n        } else if (state.truck_list.length !== props.truck_list.length) {\r\n            state.success = true\r\n        } else {\r\n            // state.success = false\r\n        }\r\n        state.customers = props.customers\r\n        state.truck_list = props.truck_list\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (idx) => {\r\n        const customer = this.props.customers[idx]\r\n        this.setState({ customer: customer.id, customer_index: idx })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { customer, plate_no, first_name, last_name } = this.state\r\n\r\n        if (plate_no === \"\" || first_name == \"\" || last_name == \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true, success: false })\r\n            await this.props.UPDATE_GET_TRUCK_LIST_ACTION()\r\n            await this.props.TRUCK_CREATE_ACTION(customer, plate_no, first_name, last_name)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ success: false })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Truck</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Truck created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={idx}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Plate No</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.plate_no}\r\n                            onChange={(e) => this.setState({ plate_no: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Driver</h6>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>First Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.first_name}\r\n                                    onChange={(e) => this.setState({ first_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Last Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.last_name}\r\n                                    onChange={(e) => this.setState({ last_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        truck_list: state.list_reducer.truck_list,\r\n        update_get_truck_list: state.list_reducer.update_get_truck_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    TRUCK_CREATE_ACTION,\r\n    UPDATE_GET_TRUCK_LIST_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TruckUpload);\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { connect } from 'react-redux';\r\nimport { MdOutlineAddCircle, MdCalendarToday, MdKeyboardArrowDown, MdCloudDownload, MdOpacity } from \"react-icons/md\";\r\nimport { SiMicrosoftexcel } from \"react-icons/si\";\r\nimport { GiMoneyStack } from \"react-icons/gi\";\r\n\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport 'reactjs-popup/dist/index.css';\r\nimport {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n} from \"../../redux/actions/actions\"\r\n\r\nimport SaleCreateForm from \"../sales/create\"\r\nimport CustomerUpload from '../customer/create';\r\nimport AddCustomer from '../customer/customer_add';\r\n\r\nimport UploadExcel from '../sales/upload';\r\nimport DownloadTemplate from './download_template';\r\nimport TruckUpload from '../customer/truck_create';\r\n\r\nclass InputComponent extends React.Component {\r\n    state = {\r\n        startDate: this.props.selection_dates.startDate,\r\n        endDate: this.props.selection_dates.endDate,\r\n        dashboard_metric: this.props.dashboard_metric,\r\n        key: 'selection',\r\n    }\r\n\r\n    handleMetricChange = async (value) => {\r\n        if (value === \"revenue\") {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(true)\r\n        } else {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(false)\r\n        }\r\n\r\n    }\r\n    handleSelect = async (ranges) => {\r\n        let id = this.props.depot_list[parseInt(this.props.depot)].id\r\n\r\n        this.setState({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n\r\n        await this.props.UPDATE_SELECTION_DATES_ACTION({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n        await this.props.GET_PRODUCT_SERIES_ACTION(ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.UPDATE_PRODUCT_SERIES_ACTION()\r\n        await this.props.GET_DEPOT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.GET_DEPOT_PRODUCT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const { selection_dates, dashboard_metric } = props\r\n        if (typeof (selection_dates.startDate === \"string\")) {\r\n            state.startDate = new Date(`${selection_dates.startDate}`)\r\n            state.endDate = new Date(`${selection_dates.endDate}`)\r\n        } else {\r\n            state.startDate = selection_dates.startDate\r\n            state.endDate = selection_dates.endDate\r\n        }\r\n        state.dashboard_metric = dashboard_metric\r\n        return state\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='buttons'>\r\n                <Popup trigger={\r\n                    <Button className='input-dates' size='sm'>\r\n                        <div className='input-dates__input-display'>\r\n                            <span><MdCalendarToday color='#D04D30' size={18} /></span>\r\n                            {this.state.startDate.toDateString()} - {this.state.endDate.toDateString()}\r\n                            <span>\r\n                                <MdKeyboardArrowDown size={18} />\r\n                            </span>\r\n                        </div>\r\n\r\n                    </Button>\r\n                }\r\n                    position=\"bottom\"\r\n                >\r\n                    <DateRangePicker\r\n                        onChange={this.handleSelect}\r\n                        showSelectionPreview={true}\r\n                        moveRangeOnFirstSelection={false}\r\n                        months={2}\r\n                        ranges={[this.state]}\r\n                        direction=\"horizontal\"\r\n                        preventSnapRefocus={true}\r\n                        calendarFocus=\"backwards\"\r\n                        className='input-date__date-range'\r\n                    />\r\n                </Popup>\r\n                <div className='metrics'>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"revenue\")}\r\n                    >\r\n                        <GiMoneyStack color=\"green\" size={20} />\r\n                        Revenue\r\n                    </Button>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric === false ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"quantities\")}\r\n                    >\r\n                        <MdOpacity color=\"orange\" size={20} />\r\n                        Quantities\r\n                    </Button>\r\n                </div>\r\n                <div className='form'>\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                size='sm'\r\n                                className='form__add-button'\r\n                                style={{ color: \"black\" }}\r\n                            >\r\n                                <MdCloudDownload color=\"green\" size={20} />\r\n                                Template\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom\"\r\n                    >\r\n                        <DownloadTemplate />\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"secondary\" size='sm' className='form__add-button' style={{ color: \"black\" }}>\r\n                                <SiMicrosoftexcel color=\"green\" size={20} />\r\n                                Upload\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <UploadExcel />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Customer\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        {/* <AddCustomer /> */}\r\n                        <CustomerUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Truck\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <TruckUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 700, minHeight: 400 }}\r\n                        trigger={\r\n                            <Button variant=\"primary\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Add Order\r\n                            </Button>\r\n                        }\r\n                        position=\"left top\"\r\n\r\n                    >\r\n                        <SaleCreateForm />\r\n\r\n                    </Popup>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n        selection_dates: state.update_reducer.selection_dates,\r\n        dashboard_metric: state.update_reducer.dashboard_metric,\r\n        depot: state.update_reducer.depot,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InputComponent);","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"sourceRoot":""}