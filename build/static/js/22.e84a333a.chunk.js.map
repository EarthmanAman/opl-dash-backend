{"version":3,"sources":["components/depot/charts/depot_product_month.js","components/utils/_funcs.js"],"names":["mapYears","data","depots","currency_type","month","months","depots_value","i","depot","filter","obj","depot__name","name","depot_sum","reduce","accumulator","object","sum","date__month","length","push","truncate","DepotProductMonth","props","mapMonths","year","values","parseInt","series","state","spinner","options","chart","type","height","plotOptions","bar","horizontal","dataLabels","position","enabled","offsetX","style","fontSize","colors","stroke","show","width","title","text","dashboard_metric","yaxis","min","tooltip","shared","intersect","y","formatter","val","xaxis","categories","id","this","React","Component","getDerivedStateFromProps","update_depot_product_month","depot_list","depot_product_month","depot_product_month_month","depot_product_month_year","product_data","revenue","quantity","result","update","currency_type_display","addMonths","date","setMonth","getMonth","num","parseFloat","toString","match"],"mappings":"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","file":"static/js/22.e84a333a.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport SpinnerComponent from '../../utils/spinner'\r\nimport { currency_type_display, truncate } from \"../../utils/_funcs\"\r\n\r\nconst mapYears = (data, depots, currency_type, month) => {\r\n    let months = data\r\n\r\n    let depots_value = []\r\n    for (let i = 0; i < depots.length; i++) {\r\n        let depot = months.filter(obj => {\r\n            return obj.depot__name === depots[i].name\r\n        })\r\n        let depot_sum = 0\r\n        if (month === 13) {\r\n            depot_sum = depot.reduce((accumulator, object) => {\r\n                return accumulator + object.sum;\r\n            }, 0);\r\n        } else {\r\n            depot_sum = depot.filter(obj => {\r\n                return obj.date__month === month + 1\r\n            })\r\n\r\n            depot_sum = depot_sum.length > 0 ? depot_sum[0].sum : 0\r\n        }\r\n\r\n        depots_value.push(currency_type === \"Million\" ? truncate(depot_sum / 1000000) : truncate(depot_sum / 1000))\r\n    }\r\n    return depots_value\r\n}\r\n\r\nconst update = (props) => {\r\n    const { depot_product_month, depot_product_month_month, depot_product_month_year, depot_list, currency_type } = props\r\n    let data = null;\r\n    let series = []\r\n    let year = parseInt(depot_product_month_year)\r\n    let month = parseInt(depot_product_month_month)\r\n    for (let i = 0; i < depot_product_month.length; i++) {\r\n        let product_data = depot_product_month[i]\r\n        data = props.dashboard_metric ? product_data.revenue : product_data.quantity\r\n        const result = mapYears(data, depot_list, currency_type, month)\r\n        series.push({ \"name\": depot_product_month[i].name, \"data\": result })\r\n    }\r\n\r\n\r\n    return series\r\n}\r\n\r\nclass DepotProductMonth extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            spinner: false,\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 430\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        dataLabels: {\r\n                            position: 'top',\r\n                        },\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    offsetX: -6,\r\n                    style: {\r\n                        fontSize: '12px',\r\n                        colors: ['#fff']\r\n                    }\r\n                },\r\n                stroke: {\r\n                    show: true,\r\n                    width: 1,\r\n                    colors: ['#fff']\r\n                },\r\n                title: {\r\n                    text: this.props.dashboard_metric ? 'Depots Comparison by Revenue' : 'Depots Comparison by Quantity'\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: this.props.dashboard_metric ? \"Kshs (Millions)\" : \"Litres\"\r\n                    },\r\n                    min: 0\r\n                },\r\n\r\n                tooltip: {\r\n                    shared: true,\r\n                    intersect: false,\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return `Kshs ${val} Millions`\r\n                        } : function (val) {\r\n                            return `${val} Litres`\r\n                        }\r\n                    }\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                },\r\n            },\r\n\r\n\r\n        };\r\n    }\r\n\r\n\r\n\r\n    mapMonths = (data, year, month) => {\r\n        let result = data.filter(obj => {\r\n            return parseInt(obj.year) === parseInt(year)\r\n        })\r\n\r\n        let values = result[0].values.filter(obj => {\r\n            return parseInt(obj.month) === parseInt(month) + 1\r\n        })\r\n        let series = []\r\n        for (let i = 0; i < values.length; i++) {\r\n            series.push({ \"name\": values[i].name, \"data\": values[i].values })\r\n        }\r\n        return series\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n\r\n        let depots = []\r\n\r\n        if (props.update_depot_product_month) {\r\n            state.spinner = true\r\n            return state\r\n        } else {\r\n            state.spinner = false\r\n        }\r\n        for (let i = 0; i < props.depot_list.length; i++) {\r\n            depots.push(props.depot_list[i].name)\r\n        }\r\n\r\n        state.series = update(props)\r\n        state.options.xaxis.categories = depots\r\n        state.options.yaxis.title.text = props.dashboard_metric ? `Kshs (${props.currency_type})` : `Litres (${props.currency_type})`\r\n        state.options.tooltip.y.formatter = props.dashboard_metric ? function (val) {\r\n            return `Kshs ${val}${currency_type_display(props.currency_type)}`\r\n        } : function (val) {\r\n            return `${val}${currency_type_display(props.currency_type)} Litres`\r\n        }\r\n\r\n        return state\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"chart\">\r\n                {this.state.spinner ? <div style={{ height: 380, position: \"relative\" }}><SpinnerComponent spinner={this.state.spinner} /></div> :\r\n                    <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={380} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DepotProductMonth","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}"],"sourceRoot":""}