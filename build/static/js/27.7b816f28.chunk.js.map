{"version":3,"sources":["components/sales/create.js","components/customer/create.js","components/customer/customer_add.js","components/sales/upload.js","components/home/download_template.js","components/customer/truck_create.js","components/home/input_section.js","../node_modules/react-bootstrap/esm/Row.js"],"names":["SaleCreateForm","state","product","customer","truck","entry_no","order_no","lpo_no","depot","date","Date","vol_obs","vol_20","selling_price","products","paid","trucks","spinner","success","null_error","componentWillReceiveProps","nextProps","a","setState","handleCustomerSelect","id","props","customers","parseInt","onSubmit","e","preventDefault","items","i","length","undefined","sales_date","SALES_CREATE_ACTION","start_date","end_date","this","depots","concat","truck_list","className","Alert","variant","size","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","target","Row","style","marginTop","height","Col","Select","map","idx","name","plate_no","driver","Check","inline","label","onClick","align","Button","React","Component","mapDispatchToProps","connect","list_reducer","depot_list","product_list","customer_list","sales_list","update_reducer","CustomerUpload","location","show_errors","event","CUSTOMER_CREATE_ACTION","color","width","timeout","visible","getDerivedStateFromProps","CustomerAdd","handleDepotSelect","ADD_CUSTOMER_ACTION","componentDidMount","ADD_CUSTOMER_REMOVE_ACTION","add_customer","status","UploadExcel","file","show_error","upload_excel_error","UPLOAD_EXCEL_ACTION","message","accept","files","uploaded_excel","DownloadTemplate","window","open","URL","TruckUpload","customer_index","first_name","last_name","UPDATE_GET_TRUCK_LIST_ACTION","TRUCK_CREATE_ACTION","update_get_truck_list","InputComponent","startDate","selection_dates","endDate","dashboard_metric","key","handleMetricChange","UPDATE_DASHBOARD_METRIC_ACTION","handleSelect","ranges","selection","UPDATE_SELECTION_DATES_ACTION","GET_PRODUCT_SERIES_ACTION","UPDATE_PRODUCT_SERIES_ACTION","GET_DEPOT_SERIES_ACTION","GET_DEPOT_PRODUCT_SERIES_ACTION","trigger","toDateString","position","showSelectionPreview","moveRangeOnFirstSelection","months","direction","preventSnapRefocus","calendarFocus","contentStyle","minHeight","ref","bsPrefix","as","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName"],"mappings":"oVAOMA,E,4MACFC,MAAQ,CACJC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,SAAU,GACVC,SAAU,GACVC,OAAQ,GACRC,MAAO,KACPC,KAAM,IAAIC,KACVC,QAAS,KACTC,OAAQ,KACRC,cAAe,KACfC,SAAU,GACVC,MAAM,EAENC,OAAQ,GACRC,SAAS,EACTC,SAAS,EACTC,YAAY,G,EAGhBC,0B,uCAA4B,WAAOC,GAAP,SAAAC,EAAA,sDAExB,EAAKC,SAAS,CAAEN,SAAS,EAAOC,SAAS,IAFjB,2C,wDAK5BM,qBAAuB,SAACC,GACpB,IAAItB,EAAW,EAAKuB,MAAMC,UAAUC,SAASH,IAC7C,EAAKF,SAAS,CAAEpB,SAAUA,EAASsB,GAAIT,OAAQb,EAASa,U,EAG5Da,S,uCAAW,WAAOC,GAAP,+CAAAR,EAAA,sDAMP,IALAQ,EAAEC,iBADK,EAE6G,EAAK9B,MAAjHC,EAFD,EAECA,QAASK,EAFV,EAEUA,OAAQJ,EAFlB,EAEkBA,SAAUC,EAF5B,EAE4BA,MAAOI,EAFnC,EAEmCA,MAAOH,EAF1C,EAE0CA,SAAUC,EAFpD,EAEoDA,SAAUG,EAF9D,EAE8DA,KAAME,EAFpE,EAEoEA,QAASC,EAF7E,EAE6EA,OAAQC,EAFrF,EAEqFA,cAAeE,EAFpG,EAEoGA,KAEvGiB,EAAQ,CAAC9B,EAASC,EAAUC,EAAOG,EAAQC,EAAOH,EAAUC,EAAUG,EAAME,EAASC,EAAQC,GAC7FM,GAAa,EACRc,EAAI,EAAGA,EAAID,EAAME,OAAQD,IACb,OAAbD,EAAMC,IAA4B,KAAbD,EAAMC,SAA0BE,IAAbH,EAAMC,KAC9Cd,GAAa,GARd,IAYHA,EAZG,gBAaH,EAAKI,SAAS,CAAEJ,YAAY,IAbzB,8BAeH,EAAKI,SAAS,CAAEN,SAAS,IACjBmB,EAAe,EAAKV,MAApBU,WAhBL,UAiBG,EAAKV,MAAMW,oBAAoBD,EAAWE,WAAYF,EAAWG,SAAUrC,EAASK,EAAQJ,EAAUC,EAAOI,EAAOH,EAAUC,EAAUG,EAAME,EAASC,EAAQC,EAAeE,GAjBjL,4C,kGAsBX,WAAU,IAAD,OACL,EAAuByB,KAAKvC,MAAtBQ,EAAN,EAAMA,KAAMO,EAAZ,EAAYA,OACZ,EAAwCwB,KAAKd,MAArCe,EAAR,EAAQA,OAAQd,EAAhB,EAAgBA,UAAWb,EAA3B,EAA2BA,SAG3B,OAFAE,EAASA,EAAO0B,OAAOF,KAAKd,MAAMiB,YAG9B,sBAAKC,UAAU,cAAf,UAGKJ,KAAKvC,MAAMgB,QACR,cAAC,IAAD,CAAkBA,QAASuB,KAAKvC,MAAMgB,UAAc,KAGxD,oBAAI2B,UAAU,eAAd,kCAGCJ,KAAKvC,MAAMiB,QACR,cAAC2B,EAAA,EAAD,CAAOC,QAAS,UAAWC,KAAK,KAAhC,sCAEW,KAGdP,KAAKvC,MAAMkB,WACR,cAAC0B,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,0CAEW,KAIf,eAACC,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAArB,UACI,eAACmB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAO9C,EAAM+C,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEd,KAAMqB,EAAE2B,OAAOF,cAGxH,eAACG,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,EAAGC,OAAQ,QAApC,UACI,cAACC,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,oBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEf,MAAOsB,EAAE2B,OAAOF,SAA5G,UACI,4CACCd,EAAOuB,KAAI,SAACxD,EAAOyD,GAAR,OACR,wBAAQV,MAAO/C,EAAMiB,GAArB,SAA0BjB,EAAM0D,kBAQhD,cAACJ,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKN,qBAAqBM,EAAE2B,OAAOF,QAA/G,UACI,4CACC5B,EAAUqC,KAAI,SAAC7D,EAAU8D,GAAX,OACX,wBAAQV,MAAOU,EAAf,SAAqB9D,EAAS+D,kBAQ9C,cAACJ,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,oBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEnB,MAAO0B,EAAE2B,OAAOF,SAA5G,UACI,4CACCvC,EAAOgD,KAAI,SAAC5D,GAAD,OACR,yBAAQmD,MAAOnD,EAAMqB,GAArB,UAA0BrB,EAAM+D,SAAhC,MAA6C/D,EAAMgE,wBAOvE,eAACpB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,sBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAErB,QAAS4B,EAAE2B,OAAOF,SAA9G,UACI,4CACCzC,EAASkD,KAAI,SAAC9D,GAAD,OACV,wBAAQqD,MAAOrD,EAAQuB,GAAvB,SAA4BvB,EAAQgE,gBAMhD,oBAAItB,UAAU,uBAAd,qBAGA,eAACI,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEjB,SAAUwB,EAAE2B,OAAOF,cAEnH,eAACG,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,EAAGC,OAAQ,QAApC,UACI,cAACC,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,qBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,SAASP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEhB,OAAQuB,EAAE2B,OAAOF,gBAInH,cAACO,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,WAAWP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAElB,SAAUyB,EAAE2B,OAAOF,mBAK3H,eAACG,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,EAAGC,OAAQ,QAApC,UACI,cAACC,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,sBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,UAAUP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEZ,QAASmB,EAAE2B,OAAOF,gBAGrH,cAACO,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,qBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,SAASP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEX,OAAQkB,EAAE2B,OAAOF,mBAKvH,eAACP,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,4BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAAgBP,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEV,cAAeiB,EAAE2B,OAAOF,cAG7H,eAACP,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,sBAA0BP,UAAU,OAApC,UAEI,cAACI,EAAA,EAAKqB,MAAN,CACIC,QAAM,EACNC,MAAM,MACNL,KAAK,SACLb,KAAM,QACN5B,GAAE,iBACF+C,QAAS,kBAAM,EAAKjD,SAAS,CAAER,MAAM,OAEzC,cAACiC,EAAA,EAAKqB,MAAN,CACIC,QAAM,EACNC,MAAM,KACNL,KAAK,SACLb,KAAM,QACN5B,GAAE,iBACF+C,QAAS,kBAAM,EAAKjD,SAAS,CAAER,MAAM,SAhB7C,mBAqBJ,qBAAK0D,MAAM,SAAX,SACI,cAACC,EAAA,EAAD,CAAQ5B,QAAQ,UAAUO,KAAK,SAA/B,gC,GAjNKsB,IAAMC,WAqO7BC,EAAqB,CACvBxC,yBAGWyC,eAfS,SAAA7E,GACpB,MAAO,CACHwC,OAASxC,EAAM8E,aAAaC,WAAa/E,EAAM8E,aAAaC,WAAa,GACzElE,SAAWb,EAAM8E,aAAaE,aAAehF,EAAM8E,aAAaE,aAAe,GAC/EtD,UAAY1B,EAAM8E,aAAaG,cAAgBjF,EAAM8E,aAAaG,cAAgB,GAClFvC,WAAa1C,EAAM8E,aAAapC,WAAa1C,EAAM8E,aAAapC,WAAa,GAC7EwC,WAAalF,EAAM8E,aAAaI,WAAalF,EAAM8E,aAAaI,WAAa,GAC7E/C,WAAYnC,EAAMmF,eAAehD,cAUrCyC,EAFWC,CAGb9E,G,QC7OIqF,E,4MACFpF,MAAQ,CACJiE,KAAM,GACNoB,SAAU,GACVrE,SAAS,EACTC,SAAS,EACTC,YAAY,EACZoE,aAAa,EACbL,cAAe,EAAKxD,MAAMwD,e,EAwB9BrD,S,uCAAW,WAAO2D,GAAP,mBAAAlE,EAAA,yDACPkE,EAAMzD,iBADC,EAGoB,EAAK9B,MAAxBiE,EAHD,EAGCA,KAAMoB,EAHP,EAGOA,SAED,KAATpB,GAA4B,KAAboB,EALZ,gBAMH,EAAK/D,SAAS,CAAEJ,YAAY,IANzB,6BAQH,EAAKI,SAAS,CAAEN,SAAS,IARtB,SASG,EAAKS,MAAM+D,uBAAuBvB,EAAMoB,GAT3C,2C,kGAeX,WAAU,IAAD,OACL,OACI,sBAAK1C,UAAU,cAAf,UACKJ,KAAKvC,MAAMgB,QACR,qBAAK2B,UAAU,UAAf,SACI,cAAC,IAAD,CAEI8C,MAAM,UACN7B,OAAQ,IACR8B,MAAO,IACPC,QAAS,IACTC,QAASrD,KAAKvC,MAAMgB,YAGnB,KACb,iDAGCuB,KAAKvC,MAAMiB,QACR,cAAC2B,EAAA,EAAD,CAAOC,QAAS,UAAWC,KAAK,KAAhC,yCAEW,KAGdP,KAAKvC,MAAMkB,WACR,cAAC0B,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,wCAEW,KAUf,eAACC,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAAUJ,GAAG,MAAlC,UACI,eAACuB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,4BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAOf,KAAKvC,MAAMiE,KACrEV,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAE2C,KAAMpC,EAAE2B,OAAOF,MAAOrC,SAAS,EAAOC,YAAY,EAAOoE,aAAa,UAG/G,eAACvC,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAOf,KAAKvC,MAAMqF,SACrE9B,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAE+D,SAAUxD,EAAE2B,OAAOF,MAAOrC,SAAS,EAAOC,YAAY,EAAOoE,aAAa,UAInH,8BACI,cAACb,EAAA,EAAD,CAAQ5B,QAAQ,UAAUO,KAAK,SAASN,KAAK,KAAKtB,GAAG,eAArD,gC,GAnGKkD,IAAMC,WAA7BS,EAWKS,yB,uCAA2B,WAAOpE,EAAOzB,GAAd,SAAAqB,EAAA,8DAEFa,IAAxBT,EAAMwD,cAFoB,yCAGnB,MAHmB,aAMG/C,IAAxBlC,EAAMiF,oBAAuD/C,IAAxBT,EAAMwD,eAM3CxD,EAAMwD,cAAchD,OAASjC,EAAMiF,cAAchD,UAJtDjC,EAAMgB,SAAU,EAChBhB,EAAMiB,SAAU,EAChBjB,EAAMkB,YAAa,GAVO,cAiB9BlB,EAAMiF,cAAgBxD,EAAMwD,cAjBE,kBAkBvBjF,GAlBuB,2C,wDAiGtC,IAOM4E,EAAqB,CACvBY,4BAGWX,eAXS,SAAA7E,GACpB,MAAO,CACHiF,cAAejF,EAAM8E,aAAaG,iBAWtCL,EAFWC,CAGbO,GC1HIU,E,4MACF9F,MAAQ,CACJE,SAAU,KACVK,MAAO,KACPS,SAAS,EACTC,SAAS,EACTC,YAAY,EACZoE,aAAa,G,EAkBjB/D,qBAAuB,SAACC,GACpB,EAAKF,SAAS,CAAEpB,SAAUsB,K,EAE9BuE,kBAAoB,SAACvE,GACjB,EAAKF,SAAS,CAAEf,MAAOiB,K,EAE3BI,S,uCAAW,WAAO2D,GAAP,mBAAAlE,EAAA,yDACPkE,EAAMzD,iBADC,EAGqB,EAAK9B,MAAzBO,EAHD,EAGCA,MAAOL,EAHR,EAGQA,SAED,OAAVK,GAA+B,OAAbL,EALf,gBAMH,EAAKoB,SAAS,CAAEJ,YAAY,IANzB,6BAQH,EAAKI,SAAS,CAAEN,SAAS,IARtB,SASG,EAAKS,MAAMuE,oBAAoBzF,EAAOL,GATzC,2C,wDAaX+F,kB,sBAAoB,sBAAA5E,EAAA,sEACV,EAAKI,MAAMyE,6BADD,2C,4CAIpB,WAAU,IAAD,OACL,OACI,sBAAKvD,UAAU,cAAf,UACKJ,KAAKvC,MAAMgB,QACR,qBAAK2B,UAAU,UAAf,SACI,cAAC,IAAD,CAEI8C,MAAM,UACN7B,OAAQ,IACR8B,MAAO,IACPC,QAAS,IACTC,QAASrD,KAAKvC,MAAMgB,YAGnB,KACb,8CAGCuB,KAAKvC,MAAMiB,QACR,cAAC2B,EAAA,EAAD,CAAOC,QAAS,UAAWC,KAAK,KAAhC,wCAEW,KAGdP,KAAKvC,MAAMkB,WACR,cAAC0B,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,wCAEW,KAGdP,KAAKvC,MAAMsF,YAER,cAAC1C,EAAA,EAAD,CAAOC,QAAQ,SAAf,mCAEE,KAEN,eAACE,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAAUJ,GAAG,MAAlC,UACI,eAACuB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,oBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKkE,kBAAkBlE,EAAE2B,OAAOF,QAA5G,UACI,4CACCf,KAAKd,MAAMe,OAAOuB,KAAI,SAACxD,EAAOyD,GAAR,OACnB,wBAAQV,MAAO/C,EAAMiB,GAArB,SAA0BjB,EAAM0D,gBAI5C,eAAClB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKN,qBAAqBM,EAAE2B,OAAOF,QAA/G,UACI,4CACCf,KAAKd,MAAMC,UAAUqC,KAAI,SAAC7D,EAAU8D,GAAX,OACtB,wBAAQV,MAAOpD,EAASsB,GAAxB,SAA6BtB,EAAS+D,gBAOlD,8BACI,cAACQ,EAAA,EAAD,CAAQ5B,QAAQ,UAAUO,KAAK,SAASN,KAAK,KAAKtB,GAAG,eAArD,6B,GA3GEkD,IAAMC,WAA1BmB,EAUKD,yBAA2B,SAACpE,EAAOzB,GAYtC,YAX2BkC,IAAvBT,EAAM0E,eAC4B,YAA9B1E,EAAM0E,aAAaC,QACnBpG,EAAMgB,SAAU,EAChBhB,EAAMiB,SAAU,EAChBjB,EAAMkB,YAAa,IAGnBlB,EAAMgB,SAAU,EAChBhB,EAAMsF,aAAc,IAGrBtF,GA8Ff,IASM4E,EAAqB,CACvBoB,wBACAE,gCC9HEG,GDiISxB,aAdS,SAAA7E,GACpB,MAAO,CACH0B,UAAW1B,EAAM8E,aAAaG,cAC9BzC,OAAQxC,EAAM8E,aAAaC,WAC3BoB,aAAcnG,EAAMmF,eAAegB,gBAYvCvB,EAFWC,CAGbiB,G,4MClIE9F,MAAQ,CACJsG,KAAM,KACNtF,SAAS,EACTC,SAAS,EACTsF,YAAY,EACZrF,YAAY,EACZX,MAAO,M,EAGXY,0B,uCAA4B,WAAOC,GAAP,SAAAC,EAAA,sDACpBD,EAAUoF,mBACV,EAAKlF,SAAS,CAAEiF,YAAY,EAAMvF,SAAS,IAE3C,EAAKM,SAAS,CAAEN,SAAS,EAAOC,SAAS,IAJrB,2C,wDAS5BW,S,uCAAW,WAAO2D,GAAP,mBAAAlE,EAAA,yDACPkE,EAAMzD,iBADC,EAEiB,EAAK9B,MAArBsG,EAFD,EAECA,KAAM/F,EAFP,EAEOA,MACD,OAAT+F,GAA2B,OAAV/F,EAHd,gBAIH,EAAKe,SAAS,CAAEJ,YAAY,IAJzB,6BAMH,EAAKI,SAAS,CAAEN,SAAS,IANtB,SAOG,EAAKS,MAAMgF,oBAAoBH,EAAM/F,GAPxC,2C,kGAaX,WAAU,IAAD,OACL,OACI,sBAAKoC,UAAU,cAAf,UACKJ,KAAKvC,MAAMgB,QACR,qBAAK2B,UAAU,UAAf,SACI,cAAC,IAAD,CAEI8C,MAAM,UACN7B,OAAQ,IACR8B,MAAO,IACPC,QAAS,IACTC,QAASrD,KAAKvC,MAAMgB,YAGnB,KACb,6CAGCuB,KAAKvC,MAAMiB,QACR,cAAC2B,EAAA,EAAD,CAAOC,QAAS,UAAWC,KAAK,KAAhC,sCAEW,KAGdP,KAAKvC,MAAMuG,WACR,cAAC3D,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,SACKP,KAAKd,MAAM+E,mBAAmBE,UACxB,KAGdnE,KAAKvC,MAAMkB,WACR,cAAC0B,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,0CAEW,KAEf,eAACC,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAArB,UACI,eAACmB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,oBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEf,MAAOsB,EAAE2B,OAAOF,SAA5G,UACI,4CACCf,KAAKd,MAAMsD,WAAWhB,KAAI,SAACxD,GAAD,OACvB,wBAAQ+C,MAAO/C,EAAMiB,GAArB,SAA0BjB,EAAM0D,gBAM5C,eAAClB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CACIC,KAAK,OACLuD,OAAO,oBACPtD,YAAY,OACZP,KAAK,KACLS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEgF,KAAMzE,EAAE2B,OAAOoD,MAAM,WAI9D,8BACI,cAACnC,EAAA,EAAD,CACI5B,QAAQ,UACRO,KAAK,SAELE,MAAOf,KAAKvC,MAAMsG,KAClBxD,KAAK,KALT,gC,GA5FE4B,IAAMC,YAqH1BC,EAAqB,CACvB6B,yBAGW5B,eAZS,SAAA7E,GACpB,MAAO,CACH6G,eAAgB7G,EAAMmF,eAAe0B,eACrCL,mBAAoBxG,EAAMmF,eAAeqB,mBACzCzB,WAAY/E,EAAM8E,aAAaC,cAUnCH,EAFWC,CAGbwB,G,QC9HIS,E,4MACF9G,MAAQ,CACJO,MAAO,M,EAGXqB,S,uCAAW,WAAO2D,GAAP,eAAAlE,EAAA,sDACPkE,EAAMzD,iBAEEvB,EAAU,EAAKP,MAAfO,MAERwG,OAAOC,KAAP,UAAeC,IAAf,2BAAqCtF,SAASpB,GAA9C,KAAyD,UALlD,2C,kGAUX,WAAU,IAAD,OACL,OACI,sBAAKoC,UAAU,cAAf,UACI,mDAGA,eAACI,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAArB,UACI,eAACmB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,oBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAEf,MAAOsB,EAAE2B,OAAOF,SAA5G,UACI,4CACCf,KAAKd,MAAMsD,WAAWhB,KAAI,SAACxD,GAAD,OACvB,wBAAQ+C,MAAO/C,EAAMiB,GAArB,SAA0BjB,EAAM0D,gBAQ5C,8BACI,cAACQ,EAAA,EAAD,CAAQ5B,QAAQ,UAAUO,KAAK,SAASN,KAAK,KAA7C,kC,GApCO4B,IAAMC,WAuDtBE,eAVS,SAAA7E,GACpB,MAAO,CACH+E,WAAY/E,EAAM8E,aAAaC,cAIZ,GAIZF,CAGbiC,GCzDII,E,4MACFlH,MAAQ,CACJE,SAAU,KACVwB,UAAW,GACXyF,eAAgB,KAChBjD,SAAU,GACVkD,WAAY,GACZC,UAAW,GACXrG,SAAS,EACTC,SAAS,EACTC,YAAY,EACZoE,aAAa,EACbL,cAAe,EAAKxD,MAAMwD,cAC1BvC,WAAY,EAAKjB,MAAMiB,Y,EA2B3BnB,qBAAuB,SAACyC,GACpB,IAAM9D,EAAW,EAAKuB,MAAMC,UAAUsC,GACtC,EAAK1C,SAAS,CAAEpB,SAAUA,EAASsB,GAAI2F,eAAgBnD,K,EAE3DpC,S,uCAAW,WAAO2D,GAAP,uBAAAlE,EAAA,yDACPkE,EAAMzD,iBADC,EAG+C,EAAK9B,MAAnDE,EAHD,EAGCA,SAAUgE,EAHX,EAGWA,SAAUkD,EAHrB,EAGqBA,WAAYC,EAHjC,EAGiCA,UAEvB,KAAbnD,GAAiC,IAAdkD,GAAiC,IAAbC,EALpC,gBAMH,EAAK/F,SAAS,CAAEJ,YAAY,IANzB,8BAQH,EAAKI,SAAS,CAAEN,SAAS,EAAMC,SAAS,IARrC,SASG,EAAKQ,MAAM6F,+BATd,wBAUG,EAAK7F,MAAM8F,oBAAoBrH,EAAUgE,EAAUkD,EAAYC,GAVlE,4C,6GAeX,WACI9E,KAAKjB,SAAS,CAAEL,SAAS,M,oBAE7B,WAAU,IAAD,OACL,OACI,sBAAK0B,UAAU,cAAf,UACKJ,KAAKvC,MAAMgB,QACR,qBAAK2B,UAAU,UAAf,SACI,cAAC,IAAD,CAEI8C,MAAM,UACN7B,OAAQ,IACR8B,MAAO,IACPC,QAAS,IACTC,QAASrD,KAAKvC,MAAMgB,YAGnB,KACb,2CAGCuB,KAAKvC,MAAMiB,QACR,cAAC2B,EAAA,EAAD,CAAOC,QAAS,UAAWC,KAAK,KAAhC,sCAEW,KAGdP,KAAKvC,MAAMkB,WACR,cAAC0B,EAAA,EAAD,CAAOC,QAAS,SAAUC,KAAK,KAA/B,wCAEW,KASf,eAACC,EAAA,EAAD,CAAMnB,SAAUW,KAAKX,SAAUJ,GAAG,MAAlC,UACI,eAACuB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,eAACH,EAAA,EAAKe,OAAN,CAAa,aAAW,yBAAyBhB,KAAK,KAAKS,SAAU,SAAC1B,GAAD,OAAO,EAAKN,qBAAqBM,EAAE2B,OAAOF,QAA/G,UACI,4CACCf,KAAKd,MAAMC,UAAUqC,KAAI,SAAC7D,EAAU8D,GAAX,OACtB,wBAAQV,MAAOU,EAAf,SAAqB9D,EAAS+D,gBAI1C,eAAClB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAOf,KAAKvC,MAAMkE,SACrEX,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAE4C,SAAUrC,EAAE2B,OAAOF,MAAOrC,SAAS,EAAOC,YAAY,EAAOoE,aAAa,UAEnH,oBAAI3C,UAAU,uBAAd,oBACA,eAACc,EAAA,EAAD,WACI,cAACI,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,yBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAOf,KAAKvC,MAAMoH,WACrE7D,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAE8F,WAAYvF,EAAE2B,OAAOF,MAAOrC,SAAS,EAAOC,YAAY,EAAOoE,aAAa,YAIzH,cAACzB,EAAA,EAAD,UACI,eAACd,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,4BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,wBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,YAAY,OAAOP,KAAK,KAAKQ,MAAOf,KAAKvC,MAAMqH,UACrE9D,SAAU,SAAC1B,GAAD,OAAO,EAAKP,SAAS,CAAE+F,UAAWxF,EAAE2B,OAAOF,MAAOrC,SAAS,EAAOC,YAAY,EAAOoE,aAAa,eAO5H,8BACI,cAACb,EAAA,EAAD,CAAQ5B,QAAQ,UAAUO,KAAK,SAASN,KAAK,KAAKtB,GAAG,eAArD,6B,GAvIEkD,IAAMC,WAA1BuC,EAgBKrB,yB,uCAA2B,WAAOpE,EAAOzB,GAAd,SAAAqB,EAAA,6DAEM,IAAhCI,EAAM+F,wBACNxH,EAAMgB,SAAU,EAChBhB,EAAMkB,YAAa,EACnBlB,EAAMiB,SAAU,EAChBjB,EAAMsF,aAAc,GAEK,OAAzBtF,EAAMmH,eACF1F,EAAMC,UAAUC,SAAS3B,EAAMmH,iBAAiBpG,OAAOkB,OAASjC,EAAM0B,UAAUC,SAAS3B,EAAMmH,iBAAiBpG,OAAOkB,OACvHjC,EAAMiB,SAAU,EAEhBjB,EAAMiB,SAAU,EAEbjB,EAAM0C,WAAWT,SAAWR,EAAMiB,WAAWT,OACpDjC,EAAMiB,SAAU,EAEhBjB,EAAMiB,SAAU,EAEpBjB,EAAM0B,UAAYD,EAAMC,UACxB1B,EAAM0C,WAAajB,EAAMiB,WApBK,kBAqBvB1C,GArBuB,2C,wDAgItC,IASM4E,EAAqB,CACvB2C,wBACAD,kCAGWzC,eAdS,SAAA7E,GACpB,MAAO,CACH0B,UAAW1B,EAAM8E,aAAaG,cAC9BvC,WAAY1C,EAAM8E,aAAapC,WAC/B8E,sBAAuBxH,EAAM8E,aAAa0C,yBAY9C5C,EAFWC,CAGbqC,GC1IIO,E,4MACFzH,MAAQ,CACJ0H,UAAW,EAAKjG,MAAMkG,gBAAgBD,UACtCE,QAAS,EAAKnG,MAAMkG,gBAAgBC,QACpCC,iBAAkB,EAAKpG,MAAMoG,iBAC7BC,IAAK,a,EAGTC,mB,uCAAqB,WAAOzE,GAAP,SAAAjC,EAAA,yDACH,YAAViC,EADa,gCAEP,EAAK7B,MAAMuG,gCAA+B,GAFnC,6CAIP,EAAKvG,MAAMuG,gCAA+B,GAJnC,2C,wDAQrBC,a,uCAAe,WAAOC,GAAP,eAAA7G,EAAA,6DACPG,EAAK,EAAKC,MAAMsD,WAAWpD,SAAS,EAAKF,MAAMlB,QAAQiB,GAE3D,EAAKF,SAAS,CACVoG,UAAWQ,EAAOC,UAAUT,UAC5BE,QAASM,EAAOC,UAAUP,UALnB,SAQL,EAAKnG,MAAM2G,8BAA8B,CAC3CV,UAAWQ,EAAOC,UAAUT,UAC5BE,QAASM,EAAOC,UAAUP,UAVnB,uBAYL,EAAKnG,MAAM4G,0BAA0BH,EAAOC,UAAUT,UAAWQ,EAAOC,UAAUP,SAZ7E,uBAaL,EAAKnG,MAAM6G,+BAbN,wBAcL,EAAK7G,MAAM8G,wBAAwB/G,EAAI0G,EAAOC,UAAUT,UAAWQ,EAAOC,UAAUP,SAd/E,yBAeL,EAAKnG,MAAM+G,gCAAgChH,EAAI0G,EAAOC,UAAUT,UAAWQ,EAAOC,UAAUP,SAfvF,4C,kGAgCf,WAAU,IAAD,OAEL,OACI,sBAAKjF,UAAU,UAAf,UACI,cAAC,IAAD,CAAO8F,QACH,cAAChE,EAAA,EAAD,CAAQ9B,UAAU,cAAcG,KAAK,KAArC,SACI,sBAAKH,UAAU,6BAAf,UACI,+BAAM,cAAC,IAAD,CAAiB8C,MAAM,UAAU3C,KAAM,OAC5CP,KAAKvC,MAAM0H,UAAUgB,eAF1B,MAE6CnG,KAAKvC,MAAM4H,QAAQc,eAC5D,+BACI,cAAC,IAAD,CAAqB5F,KAAM,YAMvC6F,SAAS,SAZb,SAcI,cAAC,kBAAD,CACIpF,SAAUhB,KAAK0F,aACfW,sBAAsB,EACtBC,2BAA2B,EAC3BC,OAAQ,EACRZ,OAAQ,CAAC3F,KAAKvC,OACd+I,UAAU,aACVC,oBAAoB,EACpBC,cAAc,YACdtG,UAAU,6BAGlB,sBAAKA,UAAU,UAAf,UACI,eAAC8B,EAAA,EAAD,CACI5B,QAASN,KAAKvC,MAAM6H,iBAAmB,OAAS,YAChD/E,KAAK,KACLH,UAAU,sBACVe,MAAO,CAAE+B,MAAO,SAChBlB,QAAS,kBAAM,EAAKwD,mBAAmB,YAL3C,UAOI,cAAC,IAAD,CAActC,MAAM,QAAQ3C,KAAM,KAPtC,aAUA,eAAC2B,EAAA,EAAD,CACI5B,SAAyC,IAAhCN,KAAKvC,MAAM6H,iBAA6B,OAAS,YAC1D/E,KAAK,KACLH,UAAU,sBACVe,MAAO,CAAE+B,MAAO,SAChBlB,QAAS,kBAAM,EAAKwD,mBAAmB,eAL3C,UAOI,cAAC,IAAD,CAAWtC,MAAM,SAAS3C,KAAM,KAPpC,mBAWJ,sBAAKH,UAAU,OAAf,UACI,cAAC,IAAD,CACIuG,aAAc,CAAExD,MAAO,KACvB+C,QACI,eAAChE,EAAA,EAAD,CACI5B,QAAQ,YACRC,KAAK,KACLH,UAAU,mBACVe,MAAO,CAAE+B,MAAO,SAJpB,UAMI,cAAC,IAAD,CAAiBA,MAAM,QAAQ3C,KAAM,KANzC,cAUJ6F,SAAS,SAbb,SAeI,cAAC,EAAD,MAGJ,cAAC,IAAD,CACIO,aAAc,CAAExD,MAAO,KACvB+C,QACI,eAAChE,EAAA,EAAD,CAAQ5B,QAAQ,YAAYC,KAAK,KAAKH,UAAU,mBAAmBe,MAAO,CAAE+B,MAAO,SAAnF,UACI,cAAC,IAAD,CAAkBA,MAAM,QAAQ3C,KAAM,KAD1C,YAKJ6F,SAAS,gBARb,SAWI,cAAC,EAAD,MAIJ,cAAC,IAAD,CACIO,aAAc,CAAExD,MAAO,KACvB+C,QACI,eAAChE,EAAA,EAAD,CAAQ5B,QAAQ,OAAOC,KAAK,KAAKH,UAAU,mBAA3C,UACI,cAAC,IAAD,CAAoB8C,MAAM,UAAU3C,KAAM,KAD9C,cAKJ6F,SAAS,gBARb,SAYI,cAAC,EAAD,MAIJ,cAAC,IAAD,CACIO,aAAc,CAAExD,MAAO,KACvB+C,QACI,eAAChE,EAAA,EAAD,CAAQ5B,QAAQ,OAAOC,KAAK,KAAKH,UAAU,mBAA3C,UACI,cAAC,IAAD,CAAoB8C,MAAM,UAAU3C,KAAM,KAD9C,WAKJ6F,SAAS,gBARb,SAWI,cAAC,EAAD,MAIJ,cAAC,IAAD,CACIO,aAAc,CAAExD,MAAO,IAAKyD,UAAW,KACvCV,QACI,eAAChE,EAAA,EAAD,CAAQ5B,QAAQ,UAAUC,KAAK,KAAKH,UAAU,mBAA9C,UACI,cAAC,IAAD,CAAoB8C,MAAM,UAAU3C,KAAM,KAD9C,eAKJ6F,SAAS,WARb,SAWI,cAAC,EAAD,e,uCA7IpB,SAAgClH,EAAOzB,GACnC,IAAQ2H,EAAsClG,EAAtCkG,gBAAiBE,EAAqBpG,EAArBoG,iBASzB,OARYF,EAAgBD,UACxB1H,EAAM0H,UAAY,IAAIjH,KAAJ,UAAYkH,EAAgBD,YAC9C1H,EAAM4H,QAAU,IAAInH,KAAJ,UAAYkH,EAAgBC,UAKhD5H,EAAM6H,iBAAmBA,EAClB7H,M,GA7Cc0E,IAAMC,WAoM7BC,EAAqB,CACvBoD,mCACAI,kCACAC,8BACAE,4BACAC,oCACAF,kCAGWzD,uBAnBS,SAAA7E,GACpB,MAAO,CAEH2H,gBAAiB3H,EAAMmF,eAAewC,gBACtCE,iBAAkB7H,EAAMmF,eAAe0C,iBACvCtH,MAAOP,EAAMmF,eAAe5E,MAC5BwE,WAAY/E,EAAM8E,aAAaC,cAenCH,EAFWC,CAGb4C,I,2HCzOIhE,EAAmBiB,cAAiB,WAMvC0E,GAAQ,IALTC,EAKS,EALTA,SACA1G,EAIS,EAJTA,UAIS,IAFT2G,GAAI3E,OAEK,MAFO,MAEP,EADNlD,EACM,iBACH8H,EAAoBC,YAAmBH,EAAU,OACjDI,EAAcC,cACdC,EAAa,GAAH,OAAMJ,EAAN,SACVK,EAAU,GAiBhB,OAhBAH,EAAYI,SAAQ,SAAAC,GAClB,IAEIC,EAFEC,EAAYvI,EAAMqI,UACjBrI,EAAMqI,GAKTC,EAFa,MAAbC,GAA0C,kBAAdA,EAG1BA,EADFD,KAGKC,EAGT,IAAMC,EAAqB,OAAbH,EAAA,WAAwBA,GAAa,GACvC,MAARC,GAAcH,EAAQM,KAAR,UAAgBP,GAAhB,OAA6BM,EAA7B,YAAsCF,OAEtCI,cAAKxF,EAAD,YAAC,aACvByE,IAAKA,GACF3H,GAFmB,IAGtBkB,UAAWyH,IAAU,WAAV,GAAWzH,EAAW4G,GAAtB,OAA4CK,UAG3DnG,EAAI4G,YAAc,MACH5G","file":"static/js/27.7b816f28.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Row, Col, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport SpinnerComponent from \"../utils/spinner\"\r\n\r\nimport { SALES_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass SaleCreateForm extends React.Component {\r\n    state = {\r\n        product: null,\r\n        customer: null,\r\n        truck: null,\r\n        entry_no: \"\",\r\n        order_no: \"\",\r\n        lpo_no: \"\",\r\n        depot: null,\r\n        date: new Date(),\r\n        vol_obs: null,\r\n        vol_20: null,\r\n        selling_price: null,\r\n        products: [],\r\n        paid: true,\r\n\r\n        trucks: [],\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n\r\n        this.setState({ spinner: false, success: true })\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        let customer = this.props.customers[parseInt(id)]\r\n        this.setState({ customer: customer.id, trucks: customer.trucks })\r\n    }\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const { product, lpo_no, customer, truck, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price, paid } = this.state\r\n\r\n        let items = [product, customer, truck, lpo_no, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price]\r\n        let null_error = false\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i] === null || items[i] === \"\" || items[i] === undefined) {\r\n                null_error = true\r\n            }\r\n        }\r\n\r\n        if (null_error) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            const { sales_date } = this.props\r\n            await this.props.SALES_CREATE_ACTION(sales_date.start_date, sales_date.end_date, product, lpo_no, customer, truck, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price, paid)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let { date, trucks } = this.state\r\n        const { depots, customers, products } = this.props\r\n        trucks = trucks.concat(this.props.truck_list)\r\n\r\n        return (\r\n            <div className='upload-form'>\r\n\r\n                {/* SPINNER */}\r\n                {this.state.spinner ?\r\n                    <SpinnerComponent spinner={this.state.spinner} /> : null}\r\n\r\n                {/* FORM */}\r\n                <h4 className='upload-title'>Fill the information</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Entry Created successful\r\n                    </Alert> : null}\r\n\r\n                {/* Null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the fields must be field\r\n                    </Alert> : null}\r\n\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Date</Form.Label>\r\n                        <Form.Control type=\"date\" placeholder=\"Date\" size='sm' value={date} onChange={(e) => this.setState({ date: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Depot</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {depots.map((depot, idx) =>\r\n                                        <option value={depot.id}>{depot.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Customer</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                                    <option>Select</option>\r\n                                    {customers.map((customer, idx) =>\r\n                                        <option value={idx}>{customer.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Truck</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ truck: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {trucks.map((truck) =>\r\n                                        <option value={truck.id}>{truck.plate_no} - {truck.driver}</option>\r\n                                    )}\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Product</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ product: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {products.map((product) =>\r\n                                <option value={product.id}>{product.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Details</h6>\r\n\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Order No</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Order No\" size='sm' onChange={(e) => this.setState({ order_no: e.target.value })} />\r\n                    </Form.Group>\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Lpo no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Lpo no\" size='sm' onChange={(e) => this.setState({ lpo_no: e.target.value })} />\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Entry no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Entry No\" size='sm' onChange={(e) => this.setState({ entry_no: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol OBS</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol OBS\" size='sm' onChange={(e) => this.setState({ vol_obs: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol@20</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol@20\" size='sm' onChange={(e) => this.setState({ vol_20: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Selling Price</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Selling price\" size='sm' onChange={(e) => this.setState({ selling_price: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Paid</Form.Label>\r\n                        <div key={`inline-radio`} className=\"mb-3\">\r\n\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"Yes\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-1`}\r\n                                onClick={() => this.setState({ paid: true })}\r\n                            />\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"No\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-2`}\r\n                                onClick={() => this.setState({ paid: false })}\r\n                            />\r\n\r\n                        </div>\r\n                    </Form.Group>\r\n                    <div align='center'>\r\n                        <Button variant='primary' type='submit'>Upload</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depots: (state.list_reducer.depot_list ? state.list_reducer.depot_list : []),\r\n        products: (state.list_reducer.product_list ? state.list_reducer.product_list : []),\r\n        customers: (state.list_reducer.customer_list ? state.list_reducer.customer_list : []),\r\n        truck_list: (state.list_reducer.truck_list ? state.list_reducer.truck_list : []),\r\n        sales_list: (state.list_reducer.sales_list ? state.list_reducer.sales_list : []),\r\n        sales_date: state.update_reducer.sales_date,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    SALES_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SaleCreateForm);\r\n","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { CUSTOMER_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerUpload extends React.Component {\r\n    state = {\r\n        name: \"\",\r\n        location: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (props.customer_list === undefined) {\r\n            return null\r\n        }\r\n\r\n        else if (state.customer_list === undefined && props.customer_list !== undefined) {\r\n\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        else if (props.customer_list.length > state.customer_list.length) {\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        state.customer_list = props.customer_list\r\n        return state\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { name, location } = this.state\r\n\r\n        if (name === \"\" || location === \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.CUSTOMER_CREATE_ACTION(name, location)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Create Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.name}\r\n                            onChange={(e) => this.setState({ name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Code</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.location}\r\n                            onChange={(e) => this.setState({ location: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Create</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customer_list: state.list_reducer.customer_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    CUSTOMER_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerUpload);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { ADD_CUSTOMER_ACTION, ADD_CUSTOMER_REMOVE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerAdd extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        depot: null,\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        if (props.add_customer !== undefined) {\r\n            if (props.add_customer.status === \"success\") {\r\n                state.spinner = false\r\n                state.success = true\r\n                state.null_error = false\r\n            }\r\n            else {\r\n                state.spinner = false\r\n                state.show_errors = true\r\n            }\r\n        }\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        this.setState({ customer: id })\r\n    }\r\n    handleDepotSelect = (id) => {\r\n        this.setState({ depot: id })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot, customer } = this.state\r\n\r\n        if (depot === null || customer === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.ADD_CUSTOMER_ACTION(depot, customer)\r\n        }\r\n\r\n    }\r\n    componentDidMount = async () => {\r\n        await this.props.ADD_CUSTOMER_REMOVE_ACTION()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer Added successfull\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {this.state.show_errors ?\r\n\r\n                    <Alert variant=\"danger\">Something went wrong!</Alert>\r\n\r\n                    : null}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleDepotSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.depots.map((depot, idx) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={customer.id}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        depots: state.list_reducer.depot_list,\r\n        add_customer: state.update_reducer.add_customer,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    ADD_CUSTOMER_ACTION,\r\n    ADD_CUSTOMER_REMOVE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerAdd);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Alert, Button } from 'react-bootstrap'\r\nimport { Triangle } from \"react-loader-spinner\"\r\n\r\nimport { UPLOAD_EXCEL_ACTION } from \"../../redux/actions/actions\"\r\n\r\nclass UploadExcel extends React.Component {\r\n\r\n    state = {\r\n        file: null,\r\n        spinner: false,\r\n        success: false,\r\n        show_error: false,\r\n        null_error: false,\r\n        depot: null,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n        if (nextProps.upload_excel_error) {\r\n            this.setState({ show_error: true, spinner: false })\r\n        } else {\r\n            this.setState({ spinner: false, success: true })\r\n        }\r\n\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const { file, depot } = this.state\r\n        if (file === null || depot === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.UPLOAD_EXCEL_ACTION(file, depot)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h5>Upload File</h5>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        File Uploaded successful\r\n                    </Alert> : null}\r\n\r\n                {/* If error */}\r\n                {this.state.show_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        {this.props.upload_excel_error.message}\r\n                    </Alert> : null}\r\n\r\n                {/* If null */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the field must be filled\r\n                    </Alert> : null}\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>File</Form.Label>\r\n                        <Form.Control\r\n                            type=\"file\"\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            placeholder=\"File\"\r\n                            size='sm'\r\n                            onChange={(e) => this.setState({ file: e.target.files[0] })}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button\r\n                            variant='primary'\r\n                            type='submit'\r\n\r\n                            value={this.state.file}\r\n                            size='sm'\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        uploaded_excel: state.update_reducer.uploaded_excel,\r\n        upload_excel_error: state.update_reducer.upload_excel_error,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPLOAD_EXCEL_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UploadExcel);\r\n","import React from 'react';\r\nimport { URL } from \"../../utils/_consts\"\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DownloadTemplate extends React.Component {\r\n    state = {\r\n        depot: null,\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot } = this.state\r\n\r\n        window.open(`${URL}/depot/download/${parseInt(depot)}/`, \"_blank\")\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                <h4>Download Template</h4>\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm'>Download</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DownloadTemplate);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { TRUCK_CREATE_ACTION, UPDATE_GET_TRUCK_LIST_ACTION } from '../../redux/actions/actions';\r\n\r\nclass TruckUpload extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        customers: [],\r\n        customer_index: null,\r\n        plate_no: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n        truck_list: this.props.truck_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (props.update_get_truck_list === false) {\r\n            state.spinner = false\r\n            state.null_error = false\r\n            state.success = true\r\n            state.show_errors = false\r\n        }\r\n        if (state.customer_index !== null) {\r\n            if (props.customers[parseInt(state.customer_index)].trucks.length > state.customers[parseInt(state.customer_index)].trucks.length) {\r\n                state.success = true\r\n            } else {\r\n                state.success = false\r\n            }\r\n        } else if (state.truck_list.length !== props.truck_list.length) {\r\n            state.success = true\r\n        } else {\r\n            state.success = false\r\n        }\r\n        state.customers = props.customers\r\n        state.truck_list = props.truck_list\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (idx) => {\r\n        const customer = this.props.customers[idx]\r\n        this.setState({ customer: customer.id, customer_index: idx })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { customer, plate_no, first_name, last_name } = this.state\r\n\r\n        if (plate_no === \"\" || first_name == \"\" || last_name == \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true, success: false })\r\n            await this.props.UPDATE_GET_TRUCK_LIST_ACTION()\r\n            await this.props.TRUCK_CREATE_ACTION(customer, plate_no, first_name, last_name)\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ success: false })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Truck</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Truck created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={idx}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Plate No</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.plate_no}\r\n                            onChange={(e) => this.setState({ plate_no: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Driver</h6>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>First Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.first_name}\r\n                                    onChange={(e) => this.setState({ first_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Last Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.last_name}\r\n                                    onChange={(e) => this.setState({ last_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        truck_list: state.list_reducer.truck_list,\r\n        update_get_truck_list: state.list_reducer.update_get_truck_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    TRUCK_CREATE_ACTION,\r\n    UPDATE_GET_TRUCK_LIST_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TruckUpload);\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { connect } from 'react-redux';\r\nimport { MdOutlineAddCircle, MdCalendarToday, MdKeyboardArrowDown, MdCloudDownload, MdOpacity } from \"react-icons/md\";\r\nimport { SiMicrosoftexcel } from \"react-icons/si\";\r\nimport { GiMoneyStack } from \"react-icons/gi\";\r\n\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport 'reactjs-popup/dist/index.css';\r\nimport {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n} from \"../../redux/actions/actions\"\r\n\r\nimport SaleCreateForm from \"../sales/create\"\r\nimport CustomerUpload from '../customer/create';\r\nimport AddCustomer from '../customer/customer_add';\r\n\r\nimport UploadExcel from '../sales/upload';\r\nimport DownloadTemplate from './download_template';\r\nimport TruckUpload from '../customer/truck_create';\r\n\r\nclass InputComponent extends React.Component {\r\n    state = {\r\n        startDate: this.props.selection_dates.startDate,\r\n        endDate: this.props.selection_dates.endDate,\r\n        dashboard_metric: this.props.dashboard_metric,\r\n        key: 'selection',\r\n    }\r\n\r\n    handleMetricChange = async (value) => {\r\n        if (value === \"revenue\") {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(true)\r\n        } else {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(false)\r\n        }\r\n\r\n    }\r\n    handleSelect = async (ranges) => {\r\n        let id = this.props.depot_list[parseInt(this.props.depot)].id\r\n\r\n        this.setState({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n\r\n        await this.props.UPDATE_SELECTION_DATES_ACTION({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n        await this.props.GET_PRODUCT_SERIES_ACTION(ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.UPDATE_PRODUCT_SERIES_ACTION()\r\n        await this.props.GET_DEPOT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.GET_DEPOT_PRODUCT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const { selection_dates, dashboard_metric } = props\r\n        if (typeof (selection_dates.startDate === \"string\")) {\r\n            state.startDate = new Date(`${selection_dates.startDate}`)\r\n            state.endDate = new Date(`${selection_dates.endDate}`)\r\n        } else {\r\n            state.startDate = selection_dates.startDate\r\n            state.endDate = selection_dates.endDate\r\n        }\r\n        state.dashboard_metric = dashboard_metric\r\n        return state\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='buttons'>\r\n                <Popup trigger={\r\n                    <Button className='input-dates' size='sm'>\r\n                        <div className='input-dates__input-display'>\r\n                            <span><MdCalendarToday color='#D04D30' size={18} /></span>\r\n                            {this.state.startDate.toDateString()} - {this.state.endDate.toDateString()}\r\n                            <span>\r\n                                <MdKeyboardArrowDown size={18} />\r\n                            </span>\r\n                        </div>\r\n\r\n                    </Button>\r\n                }\r\n                    position=\"bottom\"\r\n                >\r\n                    <DateRangePicker\r\n                        onChange={this.handleSelect}\r\n                        showSelectionPreview={true}\r\n                        moveRangeOnFirstSelection={false}\r\n                        months={2}\r\n                        ranges={[this.state]}\r\n                        direction=\"horizontal\"\r\n                        preventSnapRefocus={true}\r\n                        calendarFocus=\"backwards\"\r\n                        className='input-date__date-range'\r\n                    />\r\n                </Popup>\r\n                <div className='metrics'>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"revenue\")}\r\n                    >\r\n                        <GiMoneyStack color=\"green\" size={20} />\r\n                        Revenue\r\n                    </Button>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric === false ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"quantities\")}\r\n                    >\r\n                        <MdOpacity color=\"orange\" size={20} />\r\n                        Quantities\r\n                    </Button>\r\n                </div>\r\n                <div className='form'>\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                size='sm'\r\n                                className='form__add-button'\r\n                                style={{ color: \"black\" }}\r\n                            >\r\n                                <MdCloudDownload color=\"green\" size={20} />\r\n                                Template\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom\"\r\n                    >\r\n                        <DownloadTemplate />\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"secondary\" size='sm' className='form__add-button' style={{ color: \"black\" }}>\r\n                                <SiMicrosoftexcel color=\"green\" size={20} />\r\n                                Upload\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <UploadExcel />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Customer\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        {/* <AddCustomer /> */}\r\n                        <CustomerUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Truck\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <TruckUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 500, minHeight: 400 }}\r\n                        trigger={\r\n                            <Button variant=\"primary\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Add Order\r\n                            </Button>\r\n                        }\r\n                        position=\"left top\"\r\n\r\n                    >\r\n                        <SaleCreateForm />\r\n\r\n                    </Popup>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n        selection_dates: state.update_reducer.selection_dates,\r\n        dashboard_metric: state.update_reducer.dashboard_metric,\r\n        depot: state.update_reducer.depot,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InputComponent);","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"sourceRoot":""}