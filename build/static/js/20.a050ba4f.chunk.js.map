{"version":3,"sources":["components/customer/charts/customer_month.js","components/utils/_funcs.js"],"names":["CustomerMonth","props","state","series","options","chart","type","height","title","text","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","show","width","colors","xaxis","categories","yaxis","dashboard_metric","fill","opacity","tooltip","y","formatter","val","id","this","React","Component","getDerivedStateFromProps","data","undefined","customer","year","currency_type","result","filter","obj","parseInt","months","Array","month","length","month_value","date__month","truncate","sum","mapData","customer_year","name","connect","addMonths","date","setMonth","getMonth","currency_type_display","num","parseFloat","toString","match"],"mappings":"kNAwBMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAETC,OAAQ,GACRC,QAAS,CACLC,MAAO,CACHC,KAAM,MACNC,OAAQ,KAGZC,MAAO,CACHC,KAAM,2BAEVC,YAAa,CACTC,IAAK,CACDC,YAAY,EACZC,YAAa,MACbC,YAAa,YAGrBC,WAAY,CACRC,SAAS,GAEbC,OAAQ,CACJC,MAAM,EACNC,MAAO,EACPC,OAAQ,CAAC,gBAEbC,MAAO,CACHb,MAAO,CACHC,KAAM,UAEVa,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAE9FC,MAAO,CACHf,MAAO,CACHC,KAAM,EAAKR,MAAMuB,iBAAmB,kBAAoB,WAGhEC,KAAM,CACFC,QAAS,GAEbC,QAAS,CACLC,EAAG,CACCC,UAAW,EAAK5B,MAAMuB,iBAAmB,SAAUM,GAC/C,MAAO,QAAUA,EAAM,YACvB,SAAUA,GACV,OAAOA,EAAM,eAjDlB,E,0CA2EnB,WAEI,OAGI,qBAAKC,GAAG,QAAR,SACI,cAAC,IAAD,CAAgB3B,QAAS4B,KAAK9B,MAAME,QAASD,OAAQ6B,KAAK9B,MAAMC,OAAQG,KAAK,MAAMC,OAAQ,Y,GAlF/E0B,IAAMC,WAA5BlC,EA6DKmC,yBAA2B,SAAClC,EAAOC,GAEtC,IAAIkC,OAA0BC,IAAnBpC,EAAMqC,SAlFT,SAACF,EAAMG,EAAMC,GACzB,QAAaH,IAATD,GAA+B,OAATA,GAAiBA,IAAS,GAChD,OAAO,KAEX,IAAIK,EAASL,EAAKM,QAAO,SAAAC,GACrB,OAAOA,EAAIJ,OAASK,SAASL,MAG7BM,EAAS,IAAIC,MAAM,IAAIrB,KAAK,GAIhC,IAAK,IAAMsB,KAFXX,EAAOK,EAAOO,OAAS,EAAIP,EAAO,GAAGI,OAAS,GAEpB,CACtB,IAAII,EAAcb,EAAKW,GACvBF,EAAOI,EAAYC,YAAc,GAAuB,YAAlBV,EAA8BW,YAASF,EAAYG,IAAM,KAAYD,YAASF,EAAYG,IAAM,KAE1I,OAAOP,EAkEuCQ,CAAQpD,EAAMqC,SAAUrC,EAAMqD,cAAerD,EAAMuC,eAAiB,KAC1GrC,EAAS,CAAC,CACVoD,KAAMtD,EAAMuB,iBAAmB,UAAY,WAC3CY,KAAe,OAATA,EAAgB,GAAKA,IAM/B,OAHAlC,EAAMC,OAASA,EACfD,EAAME,QAAQmB,MAAMf,MAAMC,KAAOR,EAAMuB,iBAAmB,mBAAqB,oBAExEtB,GA4BAsD,uBAVS,SAAAtD,GACpB,MAAO,KAKgB,GAIZsD,CAGbxD,I,gCC/HF,sGAAO,IAAMyD,EAAY,SAACC,EAAMb,GAE5B,OADAa,EAAKC,SAASD,EAAKE,WAAaf,GACzBa,GAGEG,EAAwB,SAACrB,GAClC,MAAsB,YAAlBA,EACO,IAGA,KAIFW,EAAW,SAACW,GACrB,OAAOC,WAAWD,EAAIE,WAAWC,MAAM,wBAAwB","file":"static/js/20.a050ba4f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport { truncate } from \"../../utils/_funcs\";\r\n\r\nconst mapData = (data, year, currency_type) => {\r\n    if (data === undefined || data === null || data === []) {\r\n        return null\r\n    }\r\n    let result = data.filter(obj => {\r\n        return obj.year === parseInt(year)\r\n    })\r\n\r\n    let months = new Array(12).fill(0)\r\n\r\n    data = result.length > 0 ? result[0].months : []\r\n\r\n    for (const month in data) {\r\n        let month_value = data[month]\r\n        months[month_value.date__month - 1] = currency_type === \"Million\" ? truncate(month_value.sum / 10000000) : truncate(month_value.sum / 1000)\r\n    }\r\n    return months\r\n}\r\n\r\nclass CustomerMonth extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n\r\n                title: {\r\n                    text: 'Monthly Sale Comparison'\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '55%',\r\n                        endingShape: 'rounded'\r\n                    },\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                stroke: {\r\n                    show: true,\r\n                    width: 2,\r\n                    colors: ['transparent']\r\n                },\r\n                xaxis: {\r\n                    title: {\r\n                        text: 'Months'\r\n                    },\r\n                    categories: [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"],\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: this.props.dashboard_metric ? 'Kshs (Millions)' : \"Litres\"\r\n                    }\r\n                },\r\n                fill: {\r\n                    opacity: 1\r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return \"Kshs \" + val + \" Million\"\r\n                        } : function (val) {\r\n                            return val + \" Litres\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n\r\n        };\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n\r\n        let data = props.customer !== undefined ? mapData(props.customer, props.customer_year, props.currency_type) : null\r\n        let series = [{\r\n            name: props.dashboard_metric ? \"Revenue\" : \"Quantity\",\r\n            data: data === null ? [] : data\r\n        }]\r\n\r\n        state.series = series\r\n        state.options.yaxis.title.text = props.dashboard_metric ? \"Customer Revenue\" : \"Customer Quantity\"\r\n\r\n        return state\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n\r\n            <div id=\"chart\">\r\n                <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={350} />\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerMonth);\r\n","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}"],"sourceRoot":""}