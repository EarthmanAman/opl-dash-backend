{"version":3,"sources":["../node_modules/react-bootstrap/esm/Row.js","components/utils/errors.js","components/auth/index.js","components/utils/_funcs.js"],"names":["Row","React","ref","bsPrefix","className","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName","ErrorComponent","Object","keys","this","errors","map","key","idx","Alert","variant","LoginPage","state","spinner","redirect","redirect_depot","email","password","show_error","null_error","loaded","onSubmit","event","a","preventDefault","GET_TOKEN_ERROR_REMOVE_ACTION","setState","GET_TOKEN_ACTION","to","Container","Col","src","URL","alt","xs","Form","login_error","Group","controlId","Control","type","placeholder","onChange","e","target","value","Button","getDerivedStateFromProps","token","product_list","depot_list","customer_list","today","Date","today2","todayw","todayw2","undefined","is_staff","selection_date_start","addMonths","UPDATE_DASHBOARD_METRIC_ACTION","UPDATE_CURRENCY_TYPE_ACTION","UPDATE_SELECTION_DATES_ACTION","UPDATE_DEPOT_MONTH_MONTH_ACTION","UPDATE_DEPOT_MONTH_YEAR_ACTION","getFullYear","UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION","UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION","UPDATE_DEPOT_CUSTOMER_YEAR_ACTION","UPDATE_DEPOT_CUSTOMER_MONTH_ACTION","UPDATE_DEPOT_ACTION","UPDATE_SALES_DATE_ACTION","UPDATE_PRODUCT_MONTH_YEAR_ACTION","UPDATE_TOP_CUSTOMER_MONTH_ACTION","UPDATE_TOP_CUSTOMER_YEAR_ACTION","UPDATE_TOP_CUSTOMER_PRODUCT_ACTION","GET_DEPOT_LIST_ACTION","GET_PRODUCT_LIST_ACTION","GET_CUSTOMER_LIST_ACTION","mapDispatchToProps","GET_TOP_CUSTOMER_ACTION","GET_DEPOT_MONTH_ACTION","GET_PRODUCT_SERIES_ACTION","GET_PRODUCT_MONTH_ACTION","GET_PRODUCT_TOP_CUSTOMER_ACTION","connect","auth_reducer","list_reducer","date","months","setMonth","getMonth","currency_type_display","currency_type","truncate","num","parseFloat","toString","match"],"mappings":"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","file":"static/js/13.106be99b.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nclass ErrorComponent extends React.Component {\r\n    render() {\r\n\r\n        return (\r\n            Object.keys(this.props.errors).map((key, idx) =>\r\n                <Alert key={idx} variant=\"danger\">{key}: {this.props.errors[key][0]}</Alert>\r\n            )\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorComponent","import React from \"react\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { depot_list } from \"../../apis/depot_api\";\r\nimport { product_top_customer } from \"../../apis/product_api\";\r\n\r\nimport {\r\n    GET_TOKEN_ACTION, GET_TOKEN_ERROR_REMOVE_ACTION,\r\n\r\n    GET_TOP_CUSTOMER_ACTION, GET_CUSTOMER_LIST_ACTION,\r\n\r\n    GET_DEPOT_MONTH_ACTION, GET_DEPOT_LIST_ACTION,\r\n\r\n    GET_PRODUCT_SERIES_ACTION, GET_PRODUCT_MONTH_ACTION, GET_PRODUCT_TOP_CUSTOMER_ACTION, GET_PRODUCT_LIST_ACTION,\r\n\r\n    UPDATE_DASHBOARD_METRIC_ACTION, UPDATE_SELECTION_DATES_ACTION, UPDATE_CURRENCY_TYPE_ACTION, UPDATE_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_DEPOT_MONTH_MONTH_ACTION, UPDATE_DEPOT_MONTH_YEAR_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION, UPDATE_TOP_CUSTOMER_PRODUCT_ACTION, UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_DEPOT_CUSTOMER_MONTH_ACTION, UPDATE_DEPOT_CUSTOMER_YEAR_ACTION, UPDATE_DEPOT_ACTION,\r\n\r\n    UPDATE_SALES_DATE_ACTION,\r\n} from \"../../redux/actions/actions\";\r\n\r\nimport { URL } from \"../../utils/_consts\";\r\nimport ErrorComponent from \"../utils/errors\";\r\nimport SpinnerComponent from \"../utils/spinner\";\r\nimport { addMonths } from \"../utils/_funcs\";\r\n\r\nclass LoginPage extends React.Component {\r\n    state = {\r\n        spinner: false,\r\n        redirect: false,\r\n        redirect_depot: false,\r\n        email: \"\",\r\n        password: \"\",\r\n        show_error: false,\r\n        null_error: false,\r\n        loaded: false\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        const { login_error, token, product_list, depot_list, customer_list } = props\r\n        let today = new Date(\"30 Jan 2022\")\r\n        let today2 = new Date(\"30 Jan 2022\")\r\n        let todayw = new Date(\"30 Jan 2022\")\r\n        let todayw2 = new Date(\"30 Jan 2022\")\r\n        if (typeof (props.login_error) === \"object\" && login_error !== null) {\r\n            state.show_error = true\r\n            state.spinner = false\r\n        }\r\n\r\n        else if (product_list !== undefined && depot_list !== undefined && customer_list !== undefined) {\r\n            if (token.is_staff === false) {\r\n                state.redirect_depot = true\r\n            } else if (customer_list !== undefined) {\r\n                state.redirect = true\r\n\r\n            }\r\n            state.show_error = false\r\n            state.spinner = false\r\n        }\r\n        // else if (product_month !== undefined && product_series !== undefined && depot_month !== undefined && top_customer !== undefined && product_top_customer !== undefined) {\r\n        //     state.show_error = false\r\n        //     state.spinner = false\r\n        //     state.redirect = true\r\n        // }\r\n        else if (token !== undefined && token !== null && state.loaded === false) {\r\n            state.loaded = true\r\n            const selection_date_start = addMonths(today2, -1)\r\n            await props.UPDATE_DASHBOARD_METRIC_ACTION(true)\r\n            await props.UPDATE_CURRENCY_TYPE_ACTION(\"Million\")\r\n\r\n\r\n\r\n            await props.UPDATE_SELECTION_DATES_ACTION({ \"endDate\": today, \"startDate\": selection_date_start })\r\n            await props.UPDATE_DEPOT_MONTH_MONTH_ACTION(13)\r\n            await props.UPDATE_DEPOT_MONTH_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION(13)\r\n            await props.UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_CUSTOMER_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_CUSTOMER_MONTH_ACTION(13)\r\n\r\n            await props.UPDATE_DEPOT_ACTION(0)\r\n\r\n            if (token.is_staff) {\r\n                await props.UPDATE_SALES_DATE_ACTION({ \"end_date\": todayw, \"start_date\": addMonths(todayw2, -1) })\r\n                await props.UPDATE_PRODUCT_MONTH_YEAR_ACTION(today.getFullYear())\r\n                await props.UPDATE_TOP_CUSTOMER_MONTH_ACTION(13)\r\n                await props.UPDATE_TOP_CUSTOMER_YEAR_ACTION(today.getFullYear())\r\n                await props.UPDATE_TOP_CUSTOMER_PRODUCT_ACTION(\"All\")\r\n\r\n            }\r\n\r\n\r\n            await props.GET_DEPOT_LIST_ACTION()\r\n            await props.GET_PRODUCT_LIST_ACTION()\r\n            await props.GET_CUSTOMER_LIST_ACTION()\r\n\r\n\r\n            return state\r\n        }\r\n\r\n        return state\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        await this.props.GET_TOKEN_ERROR_REMOVE_ACTION()\r\n        const { email, password } = this.state\r\n        if (email === \"\" || password === \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true, show_error: false })\r\n            await this.props.GET_TOKEN_ACTION(email, password)\r\n        }\r\n    }\r\n    render() {\r\n        const { show_error, null_error, spinner, email } = this.state\r\n        if (this.state.redirect) {\r\n            return <Navigate to={\"/\"} />\r\n        } else if (this.state.redirect_depot) {\r\n            return <Navigate to=\"/depots\" />\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className='login-row'>\r\n                    {spinner ? <SpinnerComponent spinner={spinner} /> : null}\r\n                    <Col className='login-row__logo-col'>\r\n                        <img src={`${URL}/static/opl_logo.png`} alt='logo' />\r\n                    </Col>\r\n                    <Col xs={7} className=\"login-row__form-col\">\r\n\r\n                        <Form onSubmit={this.onSubmit} className=\"login-form\">\r\n                            <div className='login-form__title'>\r\n                                <h3>Sign in To The Dashboard</h3>\r\n                                <p>Enter your email and password to sign in.</p>\r\n                            </div>\r\n\r\n                            {show_error ? <ErrorComponent errors={this.props.login_error} /> : null}\r\n                            {null_error ? <ErrorComponent errors={{ \"\": [\"Fields cannot be empty\"] }} /> : null}\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter email\"\r\n                                    className='login-form__input'\r\n                                    onChange={(e) => this.setState({\r\n                                        email: e.target.value,\r\n                                        show_error: false,\r\n                                        null_error: false,\r\n                                    })} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className='login-form__input'\r\n                                    onChange={(e) => this.setState({\r\n                                        password: e.target.value,\r\n                                        show_error: false,\r\n                                        null_error: false\r\n                                    })} />\r\n                            </Form.Group>\r\n\r\n                            <Button variant=\"primary\" type=\"submit\" className='login-form__submit'>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth_reducer.token,\r\n        login_error: state.auth_reducer.login_error,\r\n\r\n        depot_list: state.list_reducer.depot_list,\r\n        product_list: state.list_reducer.product_list,\r\n        customer_list: state.list_reducer.customer_list,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    GET_TOKEN_ACTION, GET_TOKEN_ERROR_REMOVE_ACTION,\r\n\r\n    GET_TOP_CUSTOMER_ACTION, GET_CUSTOMER_LIST_ACTION,\r\n\r\n    GET_DEPOT_MONTH_ACTION, GET_DEPOT_LIST_ACTION,\r\n\r\n    GET_PRODUCT_SERIES_ACTION, GET_PRODUCT_MONTH_ACTION, GET_PRODUCT_TOP_CUSTOMER_ACTION, GET_PRODUCT_LIST_ACTION,\r\n\r\n    UPDATE_DASHBOARD_METRIC_ACTION, UPDATE_SELECTION_DATES_ACTION, UPDATE_CURRENCY_TYPE_ACTION,\r\n    UPDATE_PRODUCT_MONTH_YEAR_ACTION, UPDATE_DEPOT_MONTH_MONTH_ACTION, UPDATE_DEPOT_MONTH_YEAR_ACTION,\r\n    UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION, UPDATE_TOP_CUSTOMER_PRODUCT_ACTION, UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_DEPOT_CUSTOMER_MONTH_ACTION, UPDATE_DEPOT_CUSTOMER_YEAR_ACTION,\r\n\r\n    UPDATE_SALES_DATE_ACTION, UPDATE_DEPOT_ACTION,\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(LoginPage);","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}"],"sourceRoot":""}