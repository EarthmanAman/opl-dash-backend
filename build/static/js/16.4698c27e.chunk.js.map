{"version":3,"sources":["components/auth/index.js","components/utils/_funcs.js","../node_modules/react-bootstrap/esm/Row.js"],"names":["ErrorComponent","lazy","LoginPage","state","spinner","redirect","redirect_depot","email","password","show_error","null_error","loaded","onSubmit","event","a","preventDefault","props","GET_TOKEN_ERROR_REMOVE_ACTION","setState","GET_TOKEN_ACTION","this","to","className","src","URL","alt","xs","login_error","undefined","fallback","errors","Group","controlId","Control","type","placeholder","onChange","e","target","value","variant","React","Component","getDerivedStateFromProps","token","product_list","depot_list","customer_list","today","Date","today2","todayw","todayw2","is_staff","selection_date_start","addMonths","UPDATE_DASHBOARD_METRIC_ACTION","UPDATE_CURRENCY_TYPE_ACTION","UPDATE_SELECTION_DATES_ACTION","UPDATE_DEPOT_MONTH_MONTH_ACTION","UPDATE_DEPOT_MONTH_YEAR_ACTION","getFullYear","UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION","UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION","UPDATE_DEPOT_CUSTOMER_YEAR_ACTION","UPDATE_DEPOT_CUSTOMER_MONTH_ACTION","UPDATE_DEPOT_ACTION","UPDATE_SALES_DATE_ACTION","UPDATE_PRODUCT_MONTH_YEAR_ACTION","UPDATE_TOP_CUSTOMER_MONTH_ACTION","UPDATE_TOP_CUSTOMER_YEAR_ACTION","UPDATE_TOP_CUSTOMER_PRODUCT_ACTION","GET_DEPOT_LIST_ACTION","GET_PRODUCT_LIST_ACTION","GET_CUSTOMER_LIST_ACTION","GET_TRUCK_LIST_ACTION","mapDispatchToProps","connect","auth_reducer","list_reducer","date","months","setMonth","getMonth","currency_type_display","currency_type","truncate","num","parseFloat","toString","match","Row","ref","bsPrefix","as","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName"],"mappings":"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","file":"static/js/16.4698c27e.chunk.js","sourcesContent":["import React, { lazy, Suspense } from \"react\";\r\nimport { Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport {\r\n    GET_TOKEN_ACTION, GET_TOKEN_ERROR_REMOVE_ACTION,\r\n    GET_CUSTOMER_LIST_ACTION, GET_TRUCK_LIST_ACTION,\r\n    GET_DEPOT_LIST_ACTION,\r\n\r\n    GET_PRODUCT_LIST_ACTION,\r\n\r\n    UPDATE_DASHBOARD_METRIC_ACTION, UPDATE_SELECTION_DATES_ACTION, UPDATE_CURRENCY_TYPE_ACTION, UPDATE_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_DEPOT_MONTH_MONTH_ACTION, UPDATE_DEPOT_MONTH_YEAR_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION, UPDATE_TOP_CUSTOMER_PRODUCT_ACTION, UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_DEPOT_CUSTOMER_MONTH_ACTION, UPDATE_DEPOT_CUSTOMER_YEAR_ACTION, UPDATE_DEPOT_ACTION,\r\n\r\n    UPDATE_SALES_DATE_ACTION,\r\n} from \"../../redux/actions/actions\";\r\n\r\nimport { URL } from \"../../utils/_consts\";\r\n// import ErrorComponent from \"../utils/errors\";\r\nimport SpinnerComponent from \"../utils/spinner\";\r\nimport { addMonths } from \"../utils/_funcs\";\r\n\r\nconst ErrorComponent = lazy(() => import('../utils/errors'));\r\n\r\nclass LoginPage extends React.Component {\r\n    state = {\r\n        spinner: false,\r\n        redirect: false,\r\n        redirect_depot: false,\r\n        email: \"\",\r\n        password: \"\",\r\n        show_error: false,\r\n        null_error: false,\r\n        loaded: false\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        const { login_error, token, product_list, depot_list, customer_list } = props\r\n        let today = new Date(\"30 Jan 2022\")\r\n        let today2 = new Date(\"30 Jan 2022\")\r\n        let todayw = new Date(\"30 Jan 2022\")\r\n        let todayw2 = new Date(\"30 Jan 2022\")\r\n        if (typeof (props.login_error) === \"object\" && login_error !== null) {\r\n            state.show_error = true\r\n            state.spinner = false\r\n        }\r\n\r\n        else if (product_list !== undefined && depot_list !== undefined && customer_list !== undefined) {\r\n            if (token.is_staff === false) {\r\n                state.redirect_depot = true\r\n            } else if (customer_list !== undefined) {\r\n                state.redirect = true\r\n\r\n            }\r\n            state.show_error = false\r\n            state.spinner = false\r\n        }\r\n        // else if (product_month !== undefined && product_series !== undefined && depot_month !== undefined && top_customer !== undefined && product_top_customer !== undefined) {\r\n        //     state.show_error = false\r\n        //     state.spinner = false\r\n        //     state.redirect = true\r\n        // }\r\n        else if (token !== undefined && token !== null && state.loaded === false) {\r\n            state.loaded = true\r\n            const selection_date_start = addMonths(today2, -1)\r\n            await props.UPDATE_DASHBOARD_METRIC_ACTION(true)\r\n            await props.UPDATE_CURRENCY_TYPE_ACTION(\"Million\")\r\n\r\n\r\n\r\n            await props.UPDATE_SELECTION_DATES_ACTION({ \"endDate\": today, \"startDate\": selection_date_start })\r\n            await props.UPDATE_DEPOT_MONTH_MONTH_ACTION(13)\r\n            await props.UPDATE_DEPOT_MONTH_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION(13)\r\n            await props.UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_CUSTOMER_YEAR_ACTION(today.getFullYear())\r\n            await props.UPDATE_DEPOT_CUSTOMER_MONTH_ACTION(13)\r\n\r\n            await props.UPDATE_DEPOT_ACTION(0)\r\n            await props.UPDATE_SALES_DATE_ACTION({ \"end_date\": todayw, \"start_date\": addMonths(todayw2, -1) })\r\n            if (token.is_staff) {\r\n\r\n                await props.UPDATE_PRODUCT_MONTH_YEAR_ACTION(today.getFullYear())\r\n                await props.UPDATE_TOP_CUSTOMER_MONTH_ACTION(13)\r\n                await props.UPDATE_TOP_CUSTOMER_YEAR_ACTION(today.getFullYear())\r\n                await props.UPDATE_TOP_CUSTOMER_PRODUCT_ACTION(\"All\")\r\n\r\n            }\r\n\r\n\r\n            await props.GET_DEPOT_LIST_ACTION()\r\n            await props.GET_PRODUCT_LIST_ACTION()\r\n            await props.GET_CUSTOMER_LIST_ACTION()\r\n            await props.GET_TRUCK_LIST_ACTION()\r\n\r\n\r\n            return state\r\n        }\r\n\r\n        return state\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        await this.props.GET_TOKEN_ERROR_REMOVE_ACTION()\r\n        const { email, password } = this.state\r\n        if (email === \"\" || password === \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true, show_error: false })\r\n            await this.props.GET_TOKEN_ACTION(email, password)\r\n        }\r\n    }\r\n    render() {\r\n        const { show_error, null_error, spinner, email } = this.state\r\n        if (this.state.redirect) {\r\n            return <Navigate to={\"/\"} />\r\n        } else if (this.state.redirect_depot) {\r\n            return <Navigate to=\"/depots\" />\r\n        }\r\n\r\n        return (\r\n            <Container>\r\n                <Row className='login-row'>\r\n                    {spinner ? <SpinnerComponent spinner={spinner} /> : null}\r\n                    <Col className='login-row__logo-col'>\r\n                        <img src={`${URL}/static/opl_logo.png`} alt='logo' />\r\n                    </Col>\r\n                    <Col xs={7} className=\"login-row__form-col\">\r\n\r\n                        <Form onSubmit={this.onSubmit} className=\"login-form\">\r\n                            <div className='login-form__title'>\r\n                                <h3>Sign in To The Dashboard</h3>\r\n                                <p>Enter your email and password to sign in.</p>\r\n                            </div>\r\n\r\n                            {(this.props.login_error !== null && this.props.login_error !== undefined) ? <Suspense fallback={<SpinnerComponent spinner={true} />}><ErrorComponent errors={this.props.login_error} /> </Suspense> : null}\r\n                            {null_error ? <Suspense fallback={<SpinnerComponent spinner={true} />}><ErrorComponent errors={{ \"\": [\"Fields cannot be empty\"] }} /></Suspense> : null}\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter email\"\r\n                                    className='login-form__input'\r\n                                    onChange={(e) => this.setState({\r\n                                        email: e.target.value,\r\n                                        show_error: false,\r\n                                        null_error: false,\r\n                                    })} />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className='login-form__input'\r\n                                    onChange={(e) => this.setState({\r\n                                        password: e.target.value,\r\n                                        show_error: false,\r\n                                        null_error: false\r\n                                    })} />\r\n                            </Form.Group>\r\n\r\n                            <Button variant=\"primary\" type=\"submit\" className='login-form__submit'>\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth_reducer.token,\r\n        login_error: state.auth_reducer.login_error,\r\n\r\n        depot_list: state.list_reducer.depot_list,\r\n        product_list: state.list_reducer.product_list,\r\n        customer_list: state.list_reducer.customer_list,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    GET_TOKEN_ACTION, GET_TOKEN_ERROR_REMOVE_ACTION,\r\n    GET_CUSTOMER_LIST_ACTION,\r\n    GET_DEPOT_LIST_ACTION,\r\n    GET_TRUCK_LIST_ACTION,\r\n\r\n    GET_PRODUCT_LIST_ACTION,\r\n\r\n    UPDATE_DASHBOARD_METRIC_ACTION, UPDATE_SELECTION_DATES_ACTION, UPDATE_CURRENCY_TYPE_ACTION,\r\n    UPDATE_PRODUCT_MONTH_YEAR_ACTION, UPDATE_DEPOT_MONTH_MONTH_ACTION, UPDATE_DEPOT_MONTH_YEAR_ACTION,\r\n    UPDATE_DEPOT_PRODUCT_MONTH_MONTH_ACTION, UPDATE_DEPOT_PRODUCT_MONTH_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION, UPDATE_TOP_CUSTOMER_PRODUCT_ACTION, UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_DEPOT_CUSTOMER_MONTH_ACTION, UPDATE_DEPOT_CUSTOMER_YEAR_ACTION,\r\n\r\n    UPDATE_SALES_DATE_ACTION, UPDATE_DEPOT_ACTION,\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(LoginPage);","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"sourceRoot":""}